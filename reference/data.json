{
    "project": {
        "name": "p5",
        "description": "",
        "version": "0.2.5",
        "url": ""
    },
    "files": {
        "src/color/setting.js": {
            "name": "src/color/setting.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/core/core.js": {
            "name": "src/core/core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/image/filters.js": {
            "name": "src/image/filters.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/image/image.js": {
            "name": "src/image/image.js",
            "modules": {
                "image": 1
            },
            "classes": {
                "PImage": 1
            },
            "fors": {
                "p5": 1,
                "PImage": 1
            },
            "namespaces": {}
        },
        "src/math/noise.js": {
            "name": "src/math/noise.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/math/pvector.js": {
            "name": "src/math/pvector.js",
            "modules": {
                "PVector": 1
            },
            "classes": {
                "PVector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/random.js": {
            "name": "src/math/random.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/shape/2d_primitives.js": {
            "name": "src/shape/2d_primitives.js",
            "modules": {
                "2d primitives": 1
            },
            "classes": {},
            "fors": {
                "2d primitives": 1
            },
            "namespaces": {}
        },
        "src/shape/attributes.js": {
            "name": "src/shape/attributes.js",
            "modules": {
                "attributes": 1
            },
            "classes": {},
            "fors": {
                "attributes": 1
            },
            "namespaces": {}
        },
        "src/shape/curves.js": {
            "name": "src/shape/curves.js",
            "modules": {
                "curves": 1
            },
            "classes": {},
            "fors": {
                "curves": 1
            },
            "namespaces": {}
        },
        "src/app.js": {
            "name": "src/app.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "image": {
            "name": "image",
            "submodules": {},
            "classes": {
                "p5": 1,
                "PImage": 1
            },
            "fors": {
                "p5": 1,
                "PImage": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/image/image.js",
            "line": 127,
            "requires": [
                "core",
                "canvas",
                "constants",
                "filters"
            ]
        },
        "PVector": {
            "name": "PVector",
            "submodules": {},
            "classes": {
                "PVector": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/math/pvector.js",
            "line": 8
        },
        "2d primitives": {
            "name": "2d primitives",
            "submodules": {},
            "classes": {
                "2d primitives": 1
            },
            "fors": {
                "2d primitives": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/shape/2d_primitives.js",
            "line": 1,
            "requires": [
                "core",
                "canvas",
                "constants"
            ]
        },
        "attributes": {
            "name": "attributes",
            "submodules": {},
            "classes": {
                "attributes": 1
            },
            "fors": {
                "attributes": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/shape/attributes.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "curves": {
            "name": "curves",
            "submodules": {},
            "classes": {
                "curves": 1
            },
            "fors": {
                "curves": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/shape/curves.js",
            "line": 1,
            "requires": [
                "core"
            ]
        }
    },
    "classes": {
        "p5": {
            "name": "p5",
            "shortname": "p5",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "image",
            "namespace": ""
        },
        "PImage": {
            "name": "PImage",
            "shortname": "PImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "image",
            "namespace": "",
            "file": "src/image/image.js",
            "line": 127,
            "description": "Creates a new PImage. A PImage is a canvas backed representation of an image.\np5 can display .gif, .jpg and .png images. Images may be displayed in 2D and 3D space. Before an image is used, it must be loaded with the loadImage() function. The PImage class contains fields for the width and height of the image, as well as an array called pixels[] that contains the values for every pixel in the image. The methods described below allow easy access to the image's pixels and alpha channel and simplify the process of compositing.\n\nBefore using the pixels[] array, be sure to use the loadPixels() method on the image to make sure that the pixel data is properly loaded.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pInst",
                    "description": "An instance of a p5 sketch.",
                    "type": "Object"
                }
            ]
        },
        "PVector": {
            "name": "PVector",
            "shortname": "PVector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PVector",
            "namespace": "",
            "file": "src/math/pvector.js",
            "line": 8,
            "description": "The PVector constructor function.\n\nA class to describe a two or three dimensional vector, specifically a Euclidean (also known as geometric) vector. A vector is an entity that has both magnitude and direction. The datatype, however, stores the components of the vector (x,y for 2D, and x,y,z for 3D). The magnitude and direction can be accessed via the methods mag() and heading(). In many of the p5.js examples, you will see PVector used to describe a position, velocity, or acceleration. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (a vector that points from the origin to its location), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the PVector class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "2d primitives": {
            "name": "2d primitives",
            "shortname": "2d primitives",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "2d primitives",
            "namespace": ""
        },
        "attributes": {
            "name": "attributes",
            "shortname": "attributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": ""
        },
        "curves": {
            "name": "curves",
            "shortname": "curves",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "curves",
            "namespace": ""
        }
    },
    "classitems": [
        {
            "file": "src/color/setting.js",
            "line": 42,
            "description": "For a number of different inputs, returns a color formatted as [r, g, b, a].",
            "itemtype": "method",
            "name": "getNormalizedColor",
            "params": [
                {
                    "name": "args",
                    "description": "An 'array-like' object that represents a list of arguments",
                    "type": "Array-like"
                }
            ],
            "return": {
                "description": "Returns a color formatted as [r, g, b, a]\n                input        ==> output\n                g            ==> [g, g, g, 255]\n                g,a          ==> [g, g, g, a]\n                r, g, b      ==> [r, g, b, 255]\n                r, g, b, a   ==> [r, g, b, a]\n                [g]          ==> [g, g, g, 255]\n                [g, a]       ==> [g, g, g, a]\n                [r, g, b]    ==> [r, g, b, 255]\n                [r, g, b, a] ==> [r, g, b, a]",
                "type": "Array"
            },
            "class": "p5"
        },
        {
            "file": "src/core/core.js",
            "line": 12,
            "description": "p5 instance constructor\n\nA p5 instance....\n\nCan run in \"global\" or \"instance\" mode:\n  \"global\" - \n  \"instance\" - \n\nPublic fields on a p5 instance:",
            "params": [
                {
                    "name": "node",
                    "description": "- to attach the instance to",
                    "type": "HTMLElement"
                },
                {
                    "name": "sketch",
                    "description": "- with a setup() and draw() properties",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "P5"
            },
            "class": "p5"
        },
        {
            "file": "src/core/core.js",
            "line": 204,
            "description": "_start\n\nTODO: ???\nlooks for \"preload\" on sketch or on window",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5"
        },
        {
            "file": "src/core/core.js",
            "line": 252,
            "description": "_preload\n\nTODO: ???",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5"
        },
        {
            "file": "src/core/core.js",
            "line": 272,
            "description": "_setup\n\nTODO: ???",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5"
        },
        {
            "file": "src/core/core.js",
            "line": 287,
            "description": "_draw\n\nTODO: ???",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5"
        },
        {
            "file": "src/core/core.js",
            "line": 314,
            "description": "_runFrames\n\nTODO: ???",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5"
        },
        {
            "file": "src/core/core.js",
            "line": 330,
            "description": "_applyDefaults\n\nTODO: ???",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5"
        },
        {
            "file": "src/core/core.js",
            "line": 343,
            "description": "_setProperty\n\nTODO: ???",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 5,
            "description": "This module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implmentation.",
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 30,
            "description": "Returns the pixel buffer for a canvas",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "a one-dimensional array containing the data\n                            in thc RGBA order, with integer values between 0 and 255",
                "type": "Uint8ClampedArray"
            },
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 47,
            "description": "Returns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "[array returned by _toPixels()]",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "i",
                    "description": "[index of a 1D Image Array]",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "32 bit integer value representing ARGB value.",
                "type": "Integer"
            },
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 65,
            "description": "Modifies pixels RGBA values to values contained in the data object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pixels",
                    "description": "[array returned by _toPixels()]",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "data",
                    "description": "[source 1D array where each value represents ARGB values]",
                    "type": "Int32Array"
                }
            ],
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 84,
            "description": "Returns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "Holder of pixel data (and width and height)\n                    for a canvas",
                "type": "ImageData"
            },
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 102,
            "description": "Returns a blank ImageData object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "ImageData"
            },
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 118,
            "description": "Applys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes actually\nvisible in the canvas.\n\nThe apply method is the method that callers of this module would generally use.\nIt has been separated from the actual filters to support an advanced use case\nof creating a filter chain that executes without actually updating the canvas\nin between everystep.",
            "params": [
                {
                    "name": "func",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "canvas",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "level",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 157,
            "description": "Converts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 192,
            "description": "Converts any colors in the image to grayscale equivalents. No parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 213,
            "description": "Sets the alpha channel to entirely opaque. No parameter is used.",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 228,
            "description": "Sets each pixel to its inverse value. No parameter is used.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Invert"
                }
            ],
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 244,
            "description": "Limits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 276,
            "description": "reduces the bright areas in an image",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5"
        },
        {
            "file": "src/image/filters.js",
            "line": 347,
            "description": "increases the bright areas in an image",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5"
        },
        {
            "file": "src/image/image.js",
            "line": 10,
            "description": "This module defines the PImage class and P5 methods for\ndrawing images to the main display canvas.",
            "class": "p5",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 26,
            "description": "Create a new empty PImage object.",
            "itemtype": "method",
            "name": "createImage",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the PImage object",
                "type": "PImage"
            },
            "class": "p5",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 38,
            "description": "Loads an image from a path and creates a PImage from it.\n\nThe image may not be immediately available for rendering\nIf you want to ensure that the image is ready before doing\nanything with it you can do perform those operations in the\ncallback.",
            "itemtype": "method",
            "name": "loadImage",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called once the image is loaded. Will be passed the PImage.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the PImage object",
                "type": "PImage"
            },
            "class": "p5",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 79,
            "description": "Draw an image to the main canvas of the p5js sketch",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "PImage"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "[type]"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "[type]"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "[type]"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "[type]"
                }
            ],
            "class": "p5",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 101,
            "description": "Set image mode. Modifies the location from which images are drawn by changing the way in which parameters given to image() are intepreted.\n\nThe default mode is imageMode(CORNER), which interprets the second and third parameters of image() as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height.\n\nimageMode(CORNERS) interprets the second and third parameters of image() as the location of one corner, and the fourth and fifth parameters as the opposite corner.\n\nimageMode(CENTER) interprets the second and third parameters of image() as the image's center point. If two additional parameters are specified, they are used to set the image's width and height.\n\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.",
            "itemtype": "method",
            "name": "imageMode",
            "params": [
                {
                    "name": "m",
                    "description": "The mode: either CORNER, CORNERS, or CENTER.",
                    "type": "String"
                }
            ],
            "class": "p5",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 148,
            "description": "Loads the pixels data for this image into the [pixels] attribute.",
            "itemtype": "method",
            "name": "loadPixels",
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 171,
            "description": "Updates the backing canvas for this image with the contents of\nthe [pixels] array.",
            "itemtype": "method",
            "name": "updatePixels",
            "params": [
                {
                    "name": "x",
                    "description": "x offset of the target update area for the\n                              underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "y",
                    "description": "y offset of the target update area for the\n                              underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "w",
                    "description": "height of the target update area for the\n                              underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "h",
                    "description": "height of the target update area for the\n                              underlying canvas",
                    "type": "Integer|undefined"
                }
            ],
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 213,
            "description": "Get a region of pixels from an image.\n\nIf no params are passed, those whole image is returned,\nif x and y are the only params passed a single pixel is extracted\nif all params are passed a rectangle region is extracted and a Pimage is\nreturned.\n\nReturns undefined if the region is outside the bounds of the image",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "pixel [4 element integer] array or a PImage",
                "type": "[Integer] | PImage | undefined"
            },
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 271,
            "description": "Set the color of a single pixel or write an image into\nthis PImage.\n\nNote that for a large number of pixels this will\nbe slower than directly manipulating the pixels array\nand then calling updatePixels()\n\nTODO: Should me make the update operation toggleable?",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "imageData",
                    "description": "a pImage or an array representing a color.",
                    "type": "PImage|[Integer]"
                }
            ],
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 302,
            "description": "Resize this PImage.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "height",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 346,
            "description": "Copies a region of pixels from one image to another. If no\nsrcImage is specified this is used as the source. If the source\nand destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "PImage|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 400,
            "description": "Masks part of an image from displaying by loading another\nimage and using it's alpha channel as an alpha channel for\nthis image.",
            "itemtype": "method",
            "name": "mask",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image\n\nTODO: - Accept an array of alpha values.\n      - Use other channels of an image. p5 uses the\n      blue channel (which feels kind of arbitrary). Note: at the\n      moment this method does not match native processings original\n      functionality exactly.\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "PImage|undefined"
                }
            ],
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 431,
            "description": "Applies an image filter to a PImage",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "operation",
                    "description": "one of threshold, gray, invert, posterize and opaque\n                           see Filters.js for docs on each available filter",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|undefined"
                }
            ],
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 444,
            "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.",
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "PImage|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode\n\nAvailable blend modes are: normal | multiply | screen | overlay | \n           darken | lighten | color-dodge | color-burn | hard-light | \n           soft-light | difference | exclusion | hue | saturation | \n           color | luminosity\n\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "Integer"
                }
            ],
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/image/image.js",
            "line": 480,
            "description": "Saves the image to a file and forces the browser to download it.\nSupports png and jpg.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "extension!~YUIDOC_LINE~!!~YUIDOC_LINE~!TODO:",
                    "description": "There doesn't seem to be a way to give the force the\nbrowser to download a file *and* give it a name. Which is why \nthis function currently only take an extension parameter.",
                    "type": "[type]"
                }
            ],
            "class": "PImage",
            "module": "image"
        },
        {
            "file": "src/math/noise.js",
            "line": 48,
            "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more natural ordered, harmonic\nsuccession of numbers compared to the standard <b>random()</b> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures, natural motion,\nshapes, terrains etc.<br /><br /> The main difference to the\n<b>random()</b> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program).\nThe resulting value will always be between 0.0 and 1.0. Processing can\ncompute 1D, 2D and 3D noise, depending on the number of coordinates\ngiven. The noise value can be animated by moving through the noise space\nas demonstrated in the example above. The 2nd and 3rd dimension can also\nbe interpreted as time.<br /><br />The actual noise is structured\nsimilar to an audio signal, in respect to the function's use of\nfrequencies. Similar to the concept of harmonics in physics, perlin\nnoise is computed over several octaves which are added together for the\nfinal result. <br /><br />Another way to adjust the character of the\nresulting sequence is the scale of the input coordinates. As the\nfunction works within an infinite space the value of the coordinates\ndoesn't matter as such, only the distance between successive coordinates\ndoes (eg. when using <b>noise()</b> within a loop). As a general rule\nthe smaller the difference between coordinates, the smoother the\nresulting noise sequence will be. Steps of 0.005-0.03 work best for most\napplications, but this will differ depending on use.",
            "params": [
                {
                    "name": "x-coordinate",
                    "description": "in noise space",
                    "type": "X"
                },
                {
                    "name": "y-coordinate",
                    "description": "in noise space",
                    "type": "Y"
                },
                {
                    "name": "z-coordinate",
                    "description": "in noise space",
                    "type": "Z"
                }
            ],
            "return": {
                "description": "between 0 and 1",
                "type": "Number"
            },
            "class": "PVector",
            "module": "image"
        },
        {
            "file": "src/math/noise.js",
            "line": 163,
            "description": "Adjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over\n several octaves. Lower octaves contribute more to the output signal and\n as such define the overal intensity of the noise, whereas higher octaves\n create finer grained details in the noise sequence. By default, noise is\n computed over 4 octaves with each octave contributing exactly half than\n its predecessor, starting at 50% strength for the 1st octave. This\n falloff amount can be changed by adding an additional function\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\n 75% impact (25% less) of the previous lower octave. Any value between\n 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n result in greater than 1.0 values returned by <b>noise()</b>.<br /><br\n />By changing these parameters, the signal created by the <b>noise()</b>\n function can be adapted to fit very specific needs and characteristics.",
            "params": [
                {
                    "name": "number",
                    "description": "of octaves to be used by the noise",
                    "type": "Lod"
                },
                {
                    "name": "falloff",
                    "description": "factor for each octave",
                    "type": "Falloff"
                }
            ],
            "class": "PVector",
            "module": "image"
        },
        {
            "file": "src/math/noise.js",
            "line": 188,
            "description": "NOT IMPLEMENTED YET!\n Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n produces different results each time the program is run. Set the\n <b>value</b> parameter to a constant to return the same pseudo-random\n numbers each time the software is run.",
            "class": "PVector",
            "module": "image"
        },
        {
            "file": "src/math/pvector.js",
            "line": 19,
            "description": "The x component of the vector",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 25,
            "description": "The y component of the vector",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 31,
            "description": "The z component of the vector",
            "itemtype": "property",
            "name": "z",
            "type": "{Number}",
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 40,
            "description": "Sets the x, y, and z component of the vector using two or three separate\n variables, the data from a PVector, or the values from a float array.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "component (or PVector or array of 3 numbers)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 58,
            "description": "Gets a copy of the vector, returns a PVector object.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "The copy of the PVector object.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 70,
            "description": "Adds x, y, and z components to a vector, adds one vector to another, or adds two independent vectors together. The version of the method that adds two vectors together is a static method and returns a PVector, the others have no return value -- they act directly on the vector. See the examples for more context.",
            "itemtype": "method",
            "name": "add",
            "chainable": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector to be added.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "The y component of the vector to be added.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component of the vector to be added.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The PVector object.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 89,
            "description": "Subtracts x, y, and z components from a vector, subtracts one vector from another, or subtracts two independent vectors. The version of the method that substracts two vectors is a static method and returns a PVector, the others have no return value -- they act directly on the vector. See the examples for more context.",
            "itemtype": "method",
            "name": "sub",
            "chainable": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The PVector object.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 108,
            "description": "Multiply the vector by a scalar.",
            "itemtype": "method",
            "name": "mult",
            "chainable": 1,
            "params": [
                {
                    "name": "the",
                    "description": "number to multiply with the vector",
                    "type": "N"
                }
            ],
            "return": {
                "description": "A reference to the PVector object (allow chaining)",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 124,
            "description": "Divide the vector by a scalar.",
            "itemtype": "method",
            "name": "div",
            "chainable": 1,
            "params": [
                {
                    "name": "n",
                    "description": "the number to divide the vector by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "reference to the PVector object (allow chaining)",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 140,
            "description": "Calculates the dot product of two vectors.",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "magnitude of the dot product",
                "type": "Number/mag"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 153,
            "description": "Calculates the squared magnitude of the vector and returns the result\n as a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.)\n Faster if the real length is not required in the\n case of comparing vectors, etc.",
            "return": {
                "description": "squared magnitude of the vector",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 167,
            "description": "Calculates the dot product of two vectors.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 184,
            "description": "Calculates the cross product of two vectors.",
            "return": {
                "description": "the cross product",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 197,
            "description": "Calculates the Euclidean distance between two points (considering a\n point as a vector object).",
            "params": [
                {
                    "name": "the",
                    "description": "x, y, and z coordinates of a PVector",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 211,
            "description": "Normalize the vector to length 1 (make it a unit vector).",
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 220,
            "description": "Limit the magnitude of this vector to the value used for the <b>max</b> parameter.",
            "params": [
                {
                    "name": "the",
                    "description": "maximum magnitude for the vector",
                    "type": "Number"
                }
            ],
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 235,
            "description": "Set the magnitude of this vector to the value used for the <b>len</b> parameter.",
            "params": [
                {
                    "name": "the",
                    "description": "new length for this vector",
                    "type": "Number"
                }
            ],
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 245,
            "description": "Calculate the angle of rotation for this vector (only 2D vectors)\n TODO: deal with AngleMode",
            "return": {
                "description": "the angle of rotation",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 256,
            "description": "Rotate the vector by an angle (only 2D vectors), magnitude remains the same\n TODO: Change to rotate()\n TODO: Deal with angleMode",
            "params": [
                {
                    "name": "the",
                    "description": "angle of rotation",
                    "type": "Number"
                }
            ],
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 272,
            "description": "Linear interpolate the vector to another vector",
            "params": [
                {
                    "name": "the",
                    "description": "vector to lerp to",
                    "type": "PVector"
                },
                {
                    "name": "The",
                    "description": "amount of interpolation; some value between 0.0 (old vector) and 1.0 (new vector). 0.1 is very near the new vector. 0.5 is halfway in between.",
                    "type": "Number"
                }
            ],
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 289,
            "description": "Return a representation of this vector as a float array. This is only\n for temporary use. If used in any other fashion, the contents should be\n copied by using the <b>PVector.get()</b> method to copy into your own array.\nreturn {Array} an array with the 3 values",
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 305,
            "description": "Make a new 2D unit vector from an angle",
            "params": [
                {
                    "name": "The",
                    "description": "desired angle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The new PVector object.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 315,
            "description": "Make a new 2D unit vector from a random angle",
            "return": {
                "description": "The new PVector object.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 325,
            "description": "Make a new random 3D unit vector.",
            "return": {
                "description": "The new PVector object.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 340,
            "description": "Adds two vectors together and returns a new one.",
            "params": [
                {
                    "name": "v1",
                    "description": "a PVector to add",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "a PVector to add",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "The resulting new PVector.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 354,
            "description": "Subtracts one PVector from another and returns a new one.  The second vector (v2) is subtracted from the first (v1), resulting in v1-v2.",
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "The resulting new PVector.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 369,
            "description": "Multiplies a vector by a scalar and returns a new vector.",
            "params": [
                {
                    "name": "v",
                    "description": "the vector to multiply",
                    "type": "PVector"
                },
                {
                    "name": "n",
                    "description": "the scalar",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The resulting new PVector.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 382,
            "description": "Divides a vector by a scalar and returns a new vector.",
            "params": [
                {
                    "name": "v",
                    "description": "the vector to divide",
                    "type": "PVector"
                },
                {
                    "name": "n",
                    "description": "the scalar",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The resulting new PVector.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 396,
            "description": "Calculates the dot product of two vectors.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "PVector"
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 409,
            "description": "Calculates the cross product of two vectors.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "PVector"
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the cross product",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 422,
            "description": "Calculates the Euclidean distance between two points (considering a\n point as a vector object).",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "PVector"
                },
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 436,
            "description": "Linear interpolate a vector to another vector and return the result as a new vector.",
            "params": [
                {
                    "name": "a",
                    "description": "starting vector",
                    "type": "PVector"
                },
                {
                    "name": "the",
                    "description": "vector to lerp to",
                    "type": "PVector"
                },
                {
                    "name": "The",
                    "description": "amount of interpolation; some value between 0.0 (old vector) and 1.0 (new vector). 0.1 is very near the new vector. 0.5 is halfway in between.",
                    "type": "Number"
                }
            ],
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/pvector.js",
            "line": 448,
            "description": "Calculates and returns the angle (in radians) between two vectors.",
            "params": [
                {
                    "name": "the",
                    "description": "x, y, and z components of a PVector",
                    "type": "PVector"
                },
                {
                    "name": "the",
                    "description": "x, y, and z components of a PVector",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the angle between\n \n TODO: Needs to account for angleMode",
                "type": "Number"
            },
            "class": "PVector",
            "module": "PVector"
        },
        {
            "file": "src/math/random.js",
            "line": 18,
            "description": "Return a random number.\n\nTakes either 0, 1 or 2 arguments.\nIf no argument is given, returns a random number between 0 and 1.\nIf one argument is given, returns a random number between 0 and the number.\nIf two arguments are given, returns a random number between them, inclusive.",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "X"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Y"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "2d primitives",
            "module": "PVector"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 17,
            "description": "Draw an arc.\n\nIf a,b,c,d,start and stop are the only params provided, draws an\nopen pie.\nIf mode is provided draws the arc either open, chord or pie, dependant on the variable provided.",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "width of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "height of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "angle to start the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "angle to stop the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "optional parameter to determine the way of drawing the arc",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                " <div><img src=\"http://processing.org/reference/images/arc_.png\">\n<code>arc(50, 55, 50, 50, 0, HALF_PI);\nnoFill();\narc(50, 55, 60, 60, HALF_PI, PI);\narc(50, 55, 70, 70, PI, PI+QUARTER_PI);\narc(50, 55, 80, 80, PI+QUARTER_PI, TWO_PI);\n</code></div>\n\n<div><img src=\"http://processing.org/reference/images/arc_2.png\">\n<code>arc(50, 50, 80, 80, 0, PI+QUARTER_PI, OPEN);\n</code></div>\n\n<div><img src=\"http://processing.org/reference/images/arc_3.png\">\n<code>arc(50, 50, 80, 80, 0, PI+QUARTER_PI, CHORD);\n</code></div>\n\n<div><img src=\"http://processing.org/reference/images/arc_4.png\">\n<code>arc(50, 50, 80, 80, 0, PI+QUARTER_PI, PIE);\n</code></div>"
            ],
            "class": "2d primitives",
            "module": "2d primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 77,
            "description": "Draws an ellipse (oval) to the screen. An ellipse with equal width and height is a circle. By default, the first two parameters set the location, and the third and fourth parameters set the shape's width and height. The origin may be changed with the ellipseMode() function.",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "width of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "height of the ellipse.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2d primitives",
            "module": "2d primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 108,
            "description": "Draws a line (a direct path between two points) to the screen. The version of line() with four parameters draws the line in 2D. To color a line, use the stroke() function. A line cannot be filled, therefore the fill() function will not affect the color of a line. 2D lines are drawn with a width of one pixel by default, but this can be changed with the strokeWeight() function. The version with six parameters allows the line to be placed anywhere within XYZ space. Drawing this shape in 3D with the z parameter requires the P3D parameter in combination with size() as shown in the above example.",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2d primitives",
            "module": "2d primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 130,
            "description": "Draws a point, a coordinate in space at the dimension of one pixel. The first parameter is the horizontal value for the point, the second value is the vertical value for the point, and the optional third value is the depth value. Drawing this shape in 3D with the z parameter requires the P3D parameter in combination with size() as shown in the above example.",
            "itemtype": "method",
            "name": "point",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2d primitives",
            "module": "2d primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 160,
            "description": "Draw a quad. A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (x1,y1) sets the first vertex and the subsequent pairs should proceed clockwise or counter-clockwise around the defined shape.",
            "itemtype": "method",
            "name": "quad",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Type"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Type"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Type"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Type"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Type"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Type"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Type"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2d primitives",
            "module": "2d primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 187,
            "description": "Draws a rectangle to the screen. A rectangle is a four-sided shape with every angle at ninety degrees. By default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the rectMode() function.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "height of the rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2d primitives",
            "module": "2d primitives"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 208,
            "description": "A triangle is a plane created by connecting three points. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point.",
            "itemtype": "method",
            "name": "triangle",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate of the third point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2d primitives",
            "module": "2d primitives"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 15,
            "description": "Modifies the location from which ellipses are drawn by changing the way in which parameters given to ellipse() are intepreted.\n\nThe default mode is ellipseMode(CENTER), which interprets the first two parameters of ellipse() as the shape's center point, while the third and fourth parameters are its width and height.\n\nellipseMode(RADIUS) also uses the first two parameters of ellipse() as the shape's center point, but uses the third and fourth parameters to specify half of the shapes's width and height.\n\nellipseMode(CORNER) interprets the first two parameters of ellipse() as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\n\nellipseMode(CORNERS) interprets the first two parameters of ellipse() as the location of one corner of the ellipse's bounding box, and the third and fourth parameters as the location of the opposite corner.\n\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.",
            "itemtype": "method",
            "name": "ellipseMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CENTER, RADIUS, CORNER, or CORNERS",
                    "type": "Number/Variable"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "attributes",
            "module": "attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 40,
            "description": "Draws all geometry with jagged (aliased) edges. Note that smooth() is active by default, so it is necessary to call noSmooth() to disable smoothing of geometry, images, and fonts.",
            "itemtype": "method",
            "name": "noSmooth",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "attributes",
            "module": "attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 53,
            "description": "Modifies the location from which rectangles are drawn by changing the way in which parameters given to rect() are intepreted.\n\nThe default mode is rectMode(CORNER), which interprets the first two parameters of rect() as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\n\nrectMode(CORNERS) interprets the first two parameters of rect() as the location of one corner, and the third and fourth parameters as the location of the opposite corner.\n\nrectMode(CENTER) interprets the first two parameters of rect() as the shape's center point, while the third and fourth parameters are its width and height.\n\nrectMode(RADIUS) also uses the first two parameters of rect() as the shape's center point, but uses the third and fourth parameters to specify half of the shapes's width and height.\n\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.",
            "itemtype": "method",
            "name": "rectMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CORNER, CORNERS, CENTER, or RADIUS",
                    "type": "Number/Variable"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "attributes",
            "module": "attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 78,
            "description": "Draws all geometry with smooth (anti-aliased) edges. smooth() will also improve image quality of resized images. Note that smooth() is active by default; noSmooth() can be used to disable smoothing of geometry, images, and fonts.",
            "itemtype": "method",
            "name": "smooth",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "attributes",
            "module": "attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 91,
            "description": "Sets the style for rendering line endings. These ends are either squared, extended, or rounded, each of which specified with the corresponding parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.",
            "itemtype": "method",
            "name": "strokeCap",
            "params": [
                {
                    "name": "cap",
                    "description": "either SQUARE, PROJECT, or ROUND",
                    "type": "Number/Variable"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "attributes",
            "module": "attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 106,
            "description": "Sets the style of the joints which connect line segments. These joints are either mitered, beveled, or rounded and specified with the corresponding parameters MITER, BEVEL, and ROUND. The default joint is MITER.",
            "itemtype": "method",
            "name": "strokeJoin",
            "params": [
                {
                    "name": "join",
                    "description": "either MITER, BEVEL, ROUND",
                    "type": "Number/Variable"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "attributes",
            "module": "attributes"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 121,
            "description": "Sets the width of the stroke used for lines, points, and the border around shapes. All widths are set in units of pixels.",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "weight",
                    "description": "the weight (in pixels) of the stroke",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "attributes",
            "module": "attributes"
        },
        {
            "file": "src/shape/curves.js",
            "line": 13,
            "description": "Draws a Bezier curve on the screen. These curves are defined by a series of anchor and control points. The first two parameters specify the first anchor point and the last two parameters specify the other anchor point. The middle parameters specify the control points which define the shape of the curve. Bezier curves were developed by French engineer Pierre Bezier. Using the 3D version requires rendering with P3D (see the Environment reference for more information).",
            "itemtype": "method",
            "name": "bezier",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the second anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the second anchor point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "curves",
            "module": "curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 40,
            "description": "Sets the resolution at which Beziers display.\n\nThe default value is 20.",
            "itemtype": "method",
            "name": "bezierDetail",
            "params": [
                {
                    "name": "detail",
                    "description": "resolution of the curves",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "curves",
            "module": "curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 54,
            "description": "Calculate a point on the Bezier Curve\n\nEvaluates the Bezier at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a bezier curve at t.",
            "itemtype": "method",
            "name": "bezierPoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "value the value of the Bezier at point t",
                "type": "Number"
            },
            "class": "curves",
            "module": "curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 78,
            "description": "Calculates the tangent of a point on a Bezier curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "value the tangent at point t",
                "type": "Number"
            },
            "class": "curves",
            "module": "curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 97,
            "description": "Draws a curved line on the screen. The first and second parameters specify the beginning control point and the last two parameters specify the ending control point. The middle parameters specify the start and stop of the curve. Longer curves can be created by putting a series of curve() functions together or using curveVertex(). An additional function called curveTightness() provides control for the visual quality of the curve. The curve() function is an implementation of Catmull-Rom splines. Using the 3D version requires rendering with P3D (see the Environment reference for more information).",
            "itemtype": "method",
            "name": "curve",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the ending control point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the ending control point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "curves",
            "module": "curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 126,
            "description": "Sets the resolution at which curves display.\n\nThe default value is 20.",
            "itemtype": "method",
            "name": "curveDetail",
            "params": [
                {
                    "name": "resolution",
                    "description": "of the curves",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "curves",
            "module": "curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 142,
            "description": "Calculate a point on the Curve\n\nEvaluates the Bezier at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a curve at t.",
            "itemtype": "method",
            "name": "curvePoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "value Bezier value at point t",
                "type": "Number"
            },
            "class": "curves",
            "module": "curves"
        },
        {
            "file": "src/shape/curves.js",
            "line": 170,
            "description": "Calculates the tangent of a point on a curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points",
            "itemtype": "method",
            "name": "curveTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "value the tangent at point t",
                "type": "Number"
            },
            "class": "curves",
            "module": "curves"
        },
        {
            "file": "src/app.js",
            "line": 38,
            "description": "_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "",
            "module": "curves"
        }
    ],
    "warnings": [
        {
            "message": "param name missing: {Invert}",
            "line": " src/image/filters.js:228"
        },
        {
            "message": "param name missing: {PVector}",
            "line": " src/math/pvector.js:167"
        },
        {
            "message": "param name missing: {PVector}",
            "line": " src/math/pvector.js:396"
        },
        {
            "message": "param name missing: {PVector}",
            "line": " src/math/pvector.js:396"
        },
        {
            "message": "param name missing: {PVector}",
            "line": " src/math/pvector.js:409"
        },
        {
            "message": "param name missing: {PVector}",
            "line": " src/math/pvector.js:409"
        },
        {
            "message": "param name missing: {PVector}",
            "line": " src/math/pvector.js:422"
        },
        {
            "message": "param name missing: {PVector}",
            "line": " src/math/pvector.js:422"
        },
        {
            "message": "Missing item type\np5 instance constructor\n\nA p5 instance....\n\nCan run in \"global\" or \"instance\" mode:\n  \"global\" - \n  \"instance\" - \n\nPublic fields on a p5 instance:",
            "line": " src/core/core.js:12"
        },
        {
            "message": "Missing item type\n_start\n\nTODO: ???\nlooks for \"preload\" on sketch or on window",
            "line": " src/core/core.js:204"
        },
        {
            "message": "Missing item type\n_preload\n\nTODO: ???",
            "line": " src/core/core.js:252"
        },
        {
            "message": "Missing item type\n_setup\n\nTODO: ???",
            "line": " src/core/core.js:272"
        },
        {
            "message": "Missing item type\n_draw\n\nTODO: ???",
            "line": " src/core/core.js:287"
        },
        {
            "message": "Missing item type\n_runFrames\n\nTODO: ???",
            "line": " src/core/core.js:314"
        },
        {
            "message": "Missing item type\n_applyDefaults\n\nTODO: ???",
            "line": " src/core/core.js:330"
        },
        {
            "message": "Missing item type\n_setProperty\n\nTODO: ???",
            "line": " src/core/core.js:343"
        },
        {
            "message": "Missing item type\nThis module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implmentation.",
            "line": " src/image/filters.js:5"
        },
        {
            "message": "Missing item type\nReturns the pixel buffer for a canvas",
            "line": " src/image/filters.js:30"
        },
        {
            "message": "Missing item type\nReturns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "line": " src/image/filters.js:47"
        },
        {
            "message": "Missing item type\nModifies pixels RGBA values to values contained in the data object.",
            "line": " src/image/filters.js:65"
        },
        {
            "message": "Missing item type\nReturns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "line": " src/image/filters.js:84"
        },
        {
            "message": "Missing item type\nReturns a blank ImageData object.",
            "line": " src/image/filters.js:102"
        },
        {
            "message": "Missing item type\nApplys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes actually\nvisible in the canvas.\n\nThe apply method is the method that callers of this module would generally use.\nIt has been separated from the actual filters to support an advanced use case\nof creating a filter chain that executes without actually updating the canvas\nin between everystep.",
            "line": " src/image/filters.js:118"
        },
        {
            "message": "Missing item type\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " src/image/filters.js:157"
        },
        {
            "message": "Missing item type\nConverts any colors in the image to grayscale equivalents. No parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " src/image/filters.js:192"
        },
        {
            "message": "Missing item type\nSets the alpha channel to entirely opaque. No parameter is used.",
            "line": " src/image/filters.js:213"
        },
        {
            "message": "Missing item type\nSets each pixel to its inverse value. No parameter is used.",
            "line": " src/image/filters.js:228"
        },
        {
            "message": "Missing item type\nLimits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "line": " src/image/filters.js:244"
        },
        {
            "message": "Missing item type\nreduces the bright areas in an image",
            "line": " src/image/filters.js:276"
        },
        {
            "message": "Missing item type\nincreases the bright areas in an image",
            "line": " src/image/filters.js:347"
        },
        {
            "message": "Missing item type\nThis module defines the PImage class and P5 methods for\ndrawing images to the main display canvas.",
            "line": " src/image/image.js:10"
        },
        {
            "message": "Missing item type\nReturns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more natural ordered, harmonic\nsuccession of numbers compared to the standard <b>random()</b> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures, natural motion,\nshapes, terrains etc.<br /><br /> The main difference to the\n<b>random()</b> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program).\nThe resulting value will always be between 0.0 and 1.0. Processing can\ncompute 1D, 2D and 3D noise, depending on the number of coordinates\ngiven. The noise value can be animated by moving through the noise space\nas demonstrated in the example above. The 2nd and 3rd dimension can also\nbe interpreted as time.<br /><br />The actual noise is structured\nsimilar to an audio signal, in respect to the function's use of\nfrequencies. Similar to the concept of harmonics in physics, perlin\nnoise is computed over several octaves which are added together for the\nfinal result. <br /><br />Another way to adjust the character of the\nresulting sequence is the scale of the input coordinates. As the\nfunction works within an infinite space the value of the coordinates\ndoesn't matter as such, only the distance between successive coordinates\ndoes (eg. when using <b>noise()</b> within a loop). As a general rule\nthe smaller the difference between coordinates, the smoother the\nresulting noise sequence will be. Steps of 0.005-0.03 work best for most\napplications, but this will differ depending on use.",
            "line": " src/math/noise.js:48"
        },
        {
            "message": "Missing item type\nAdjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over\n several octaves. Lower octaves contribute more to the output signal and\n as such define the overal intensity of the noise, whereas higher octaves\n create finer grained details in the noise sequence. By default, noise is\n computed over 4 octaves with each octave contributing exactly half than\n its predecessor, starting at 50% strength for the 1st octave. This\n falloff amount can be changed by adding an additional function\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\n 75% impact (25% less) of the previous lower octave. Any value between\n 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n result in greater than 1.0 values returned by <b>noise()</b>.<br /><br\n />By changing these parameters, the signal created by the <b>noise()</b>\n function can be adapted to fit very specific needs and characteristics.",
            "line": " src/math/noise.js:163"
        },
        {
            "message": "Missing item type\nNOT IMPLEMENTED YET!\n Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n produces different results each time the program is run. Set the\n <b>value</b> parameter to a constant to return the same pseudo-random\n numbers each time the software is run.",
            "line": " src/math/noise.js:188"
        },
        {
            "message": "Missing item type\nCalculates the squared magnitude of the vector and returns the result\n as a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.)\n Faster if the real length is not required in the\n case of comparing vectors, etc.",
            "line": " src/math/pvector.js:153"
        },
        {
            "message": "Missing item type\nCalculates the dot product of two vectors.",
            "line": " src/math/pvector.js:167"
        },
        {
            "message": "Missing item type\nCalculates the cross product of two vectors.",
            "line": " src/math/pvector.js:184"
        },
        {
            "message": "Missing item type\nCalculates the Euclidean distance between two points (considering a\n point as a vector object).",
            "line": " src/math/pvector.js:197"
        },
        {
            "message": "Missing item type\nNormalize the vector to length 1 (make it a unit vector).",
            "line": " src/math/pvector.js:211"
        },
        {
            "message": "Missing item type\nLimit the magnitude of this vector to the value used for the <b>max</b> parameter.",
            "line": " src/math/pvector.js:220"
        },
        {
            "message": "Missing item type\nSet the magnitude of this vector to the value used for the <b>len</b> parameter.",
            "line": " src/math/pvector.js:235"
        },
        {
            "message": "Missing item type\nCalculate the angle of rotation for this vector (only 2D vectors)\n TODO: deal with AngleMode",
            "line": " src/math/pvector.js:245"
        },
        {
            "message": "Missing item type\nRotate the vector by an angle (only 2D vectors), magnitude remains the same\n TODO: Change to rotate()\n TODO: Deal with angleMode",
            "line": " src/math/pvector.js:256"
        },
        {
            "message": "Missing item type\nLinear interpolate the vector to another vector",
            "line": " src/math/pvector.js:272"
        },
        {
            "message": "Missing item type\nReturn a representation of this vector as a float array. This is only\n for temporary use. If used in any other fashion, the contents should be\n copied by using the <b>PVector.get()</b> method to copy into your own array.\nreturn {Array} an array with the 3 values",
            "line": " src/math/pvector.js:289"
        },
        {
            "message": "Missing item type\nMake a new 2D unit vector from an angle",
            "line": " src/math/pvector.js:305"
        },
        {
            "message": "Missing item type\nMake a new 2D unit vector from a random angle",
            "line": " src/math/pvector.js:315"
        },
        {
            "message": "Missing item type\nMake a new random 3D unit vector.",
            "line": " src/math/pvector.js:325"
        },
        {
            "message": "Missing item type\nAdds two vectors together and returns a new one.",
            "line": " src/math/pvector.js:340"
        },
        {
            "message": "Missing item type\nSubtracts one PVector from another and returns a new one.  The second vector (v2) is subtracted from the first (v1), resulting in v1-v2.",
            "line": " src/math/pvector.js:354"
        },
        {
            "message": "Missing item type\nMultiplies a vector by a scalar and returns a new vector.",
            "line": " src/math/pvector.js:369"
        },
        {
            "message": "Missing item type\nDivides a vector by a scalar and returns a new vector.",
            "line": " src/math/pvector.js:382"
        },
        {
            "message": "Missing item type\nCalculates the dot product of two vectors.",
            "line": " src/math/pvector.js:396"
        },
        {
            "message": "Missing item type\nCalculates the cross product of two vectors.",
            "line": " src/math/pvector.js:409"
        },
        {
            "message": "Missing item type\nCalculates the Euclidean distance between two points (considering a\n point as a vector object).",
            "line": " src/math/pvector.js:422"
        },
        {
            "message": "Missing item type\nLinear interpolate a vector to another vector and return the result as a new vector.",
            "line": " src/math/pvector.js:436"
        },
        {
            "message": "Missing item type\nCalculates and returns the angle (in radians) between two vectors.",
            "line": " src/math/pvector.js:448"
        },
        {
            "message": "Missing item type\nReturn a random number.\n\nTakes either 0, 1 or 2 arguments.\nIf no argument is given, returns a random number between 0 and 1.\nIf one argument is given, returns a random number between 0 and the number.\nIf two arguments are given, returns a random number between them, inclusive.",
            "line": " src/math/random.js:18"
        },
        {
            "message": "Missing item type\nCalculates the tangent of a point on a Bezier curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points",
            "line": " src/shape/curves.js:78"
        },
        {
            "message": "Missing item type\n_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing",
            "line": " src/app.js:38"
        }
    ]
}