{
    "project": {
        "name": "p5",
        "description": "",
        "version": "0.2.15",
        "url": ""
    },
    "files": {
        "src/color/creating_reading.js": {
            "name": "src/color/creating_reading.js",
            "modules": {
                "Color": 1
            },
            "classes": {},
            "fors": {
                "Creating & Reading": 1
            },
            "namespaces": {}
        },
        "src/color/setting.js": {
            "name": "src/color/setting.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Setting": 1
            },
            "namespaces": {}
        },
        "src/core/core.js": {
            "name": "src/core/core.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Environment:Environment": 1,
                "Structure:Structure": 1
            },
            "namespaces": {}
        },
        "src/data/array_functions.js": {
            "name": "src/data/array_functions.js",
            "modules": {
                "Data": 1
            },
            "classes": {},
            "fors": {
                "Array Functions": 1
            },
            "namespaces": {}
        },
        "src/data/string_functions.js": {
            "name": "src/data/string_functions.js",
            "modules": {},
            "classes": {},
            "fors": {
                "String Functions": 1
            },
            "namespaces": {}
        },
        "src/dom/manipulate.js": {
            "name": "src/dom/manipulate.js",
            "modules": {
                "DOM": 1
            },
            "classes": {},
            "fors": {
                "Manipulate": 1
            },
            "namespaces": {}
        },
        "src/dom/pelement.js": {
            "name": "src/dom/pelement.js",
            "modules": {},
            "classes": {},
            "fors": {
                "PElement": 1,
                "DOM:PElement": 1
            },
            "namespaces": {}
        },
        "src/environment/environment.js": {
            "name": "src/environment/environment.js",
            "modules": {
                "Environment": 1
            },
            "classes": {},
            "fors": {
                "Environment": 1
            },
            "namespaces": {}
        },
        "src/image/filters.js": {
            "name": "src/image/filters.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/image/image.js": {
            "name": "src/image/image.js",
            "modules": {
                "Image": 1
            },
            "classes": {
                "PImage": 1
            },
            "fors": {
                "Image": 1,
                "Loading & Displaying": 1,
                "PImage": 1
            },
            "namespaces": {}
        },
        "src/image/pixels.js": {
            "name": "src/image/pixels.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Pixels": 1,
                "Image:Pixels": 1
            },
            "namespaces": {}
        },
        "src/input/files.js": {
            "name": "src/input/files.js",
            "modules": {
                "Input": 1
            },
            "classes": {},
            "fors": {
                "Files": 1
            },
            "namespaces": {}
        },
        "src/input/keyboard.js": {
            "name": "src/input/keyboard.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Keyboard": 1
            },
            "namespaces": {}
        },
        "src/input/mouse.js": {
            "name": "src/input/mouse.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Mouse": 1
            },
            "namespaces": {}
        },
        "src/input/time_date.js": {
            "name": "src/input/time_date.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Time & Date": 1
            },
            "namespaces": {}
        },
        "src/input/touch.js": {
            "name": "src/input/touch.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Touch": 1
            },
            "namespaces": {}
        },
        "src/math/calculation.js": {
            "name": "src/math/calculation.js",
            "modules": {
                "Math": 1
            },
            "classes": {},
            "fors": {
                "Calculation": 1
            },
            "namespaces": {}
        },
        "src/math/noise.js": {
            "name": "src/math/noise.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Noise": 1
            },
            "namespaces": {}
        },
        "src/math/pvector.js": {
            "name": "src/math/pvector.js",
            "modules": {},
            "classes": {
                "PVector": 1
            },
            "fors": {
                "PVector": 1,
                "Math": 1
            },
            "namespaces": {}
        },
        "src/math/random.js": {
            "name": "src/math/random.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Random": 1
            },
            "namespaces": {}
        },
        "src/math/trigonometry.js": {
            "name": "src/math/trigonometry.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Trigonometry": 1
            },
            "namespaces": {}
        },
        "src/output/text_area.js": {
            "name": "src/output/text_area.js",
            "modules": {
                "Output": 1
            },
            "classes": {},
            "fors": {
                "Text Area": 1
            },
            "namespaces": {}
        },
        "src/shape/2d_primitives.js": {
            "name": "src/shape/2d_primitives.js",
            "modules": {
                "Shape": 1
            },
            "classes": {},
            "fors": {
                "2D Primitives": 1
            },
            "namespaces": {}
        },
        "src/shape/attributes.js": {
            "name": "src/shape/attributes.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Attributes": 1
            },
            "namespaces": {}
        },
        "src/shape/curves.js": {
            "name": "src/shape/curves.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Curves": 1
            },
            "namespaces": {}
        },
        "src/shape/vertex.js": {
            "name": "src/shape/vertex.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Vertex": 1
            },
            "namespaces": {}
        },
        "src/structure/structure.js": {
            "name": "src/structure/structure.js",
            "modules": {
                "Structure": 1
            },
            "classes": {},
            "fors": {
                "Structure": 1
            },
            "namespaces": {}
        },
        "src/transform/transform.js": {
            "name": "src/transform/transform.js",
            "modules": {
                "Transform": 1
            },
            "classes": {},
            "fors": {
                "Transform": 1
            },
            "namespaces": {}
        },
        "src/typography/attributes.js": {
            "name": "src/typography/attributes.js",
            "modules": {
                "Typography": 1
            },
            "classes": {},
            "fors": {
                "Attributes": 1
            },
            "namespaces": {}
        },
        "src/typography/loading_displaying.js": {
            "name": "src/typography/loading_displaying.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Loading & Displaying": 1
            },
            "namespaces": {}
        },
        "src/var/constants.js": {
            "name": "src/var/constants.js",
            "modules": {
                "Constants": 1
            },
            "classes": {},
            "fors": {
                "Constants": 1
            },
            "namespaces": {}
        },
        "src/app.js": {
            "name": "src/app.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/addons/p5.dom.js": {
            "name": "lib/addons/p5.dom.js",
            "modules": {
                "*": 1
            },
            "classes": {},
            "fors": {
                "DOM:PElement": 1,
                "DOM:Manipulate": 1,
                "p5.dom:p5.dom": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "Color": {
            "name": "Color",
            "submodules": {},
            "classes": {
                "Creating & Reading": 1,
                "Setting": 1
            },
            "fors": {
                "Creating & Reading": 1,
                "Setting": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/color/creating_reading.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "*": {
            "name": "*",
            "submodules": {},
            "classes": {
                "Environment:Environment": 1,
                "Structure:Structure": 1,
                "DOM:Manipulate": 1,
                "p5.dom:p5.dom": 1
            },
            "fors": {
                "Environment:Environment": 1,
                "Structure:Structure": 1,
                "DOM:PElement": 1,
                "DOM:Manipulate": 1,
                "p5.dom:p5.dom": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "lib/addons/p5.dom.js",
            "line": 1
        },
        "Data": {
            "name": "Data",
            "submodules": {},
            "classes": {
                "Array Functions": 1,
                "String Functions": 1
            },
            "fors": {
                "Array Functions": 1,
                "String Functions": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/data/array_functions.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "DOM": {
            "name": "DOM",
            "submodules": {},
            "classes": {
                "Manipulate": 1,
                "PElement": 1,
                "DOM:PElement": 1
            },
            "fors": {
                "Manipulate": 1,
                "PElement": 1,
                "DOM:PElement": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/dom/manipulate.js",
            "line": 1
        },
        "Environment": {
            "name": "Environment",
            "submodules": {},
            "classes": {
                "Environment": 1
            },
            "fors": {
                "Environment": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/environment/environment.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Image": {
            "name": "Image",
            "submodules": {},
            "classes": {
                "Image": 1,
                "Loading & Displaying": 1,
                "PImage": 1,
                "Pixels": 1,
                "Image:Pixels": 1
            },
            "fors": {
                "Image": 1,
                "Loading & Displaying": 1,
                "PImage": 1,
                "Pixels": 1,
                "Image:Pixels": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/image/image.js",
            "line": 225,
            "requires": [
                "core",
                "canvas",
                "constants",
                "filters"
            ]
        },
        "Input": {
            "name": "Input",
            "submodules": {},
            "classes": {
                "Files": 1,
                "Keyboard": 1,
                "Mouse": 1,
                "Time & Date": 1,
                "Touch": 1
            },
            "fors": {
                "Files": 1,
                "Keyboard": 1,
                "Mouse": 1,
                "Time & Date": 1,
                "Touch": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/input/files.js",
            "line": 1,
            "requires": [
                "core",
                "reqwest"
            ]
        },
        "Math": {
            "name": "Math",
            "submodules": {},
            "classes": {
                "Calculation": 1,
                "Noise": 1,
                "PVector": 1,
                "Math": 1,
                "Random": 1,
                "Trigonometry": 1
            },
            "fors": {
                "Calculation": 1,
                "Noise": 1,
                "PVector": 1,
                "Math": 1,
                "Random": 1,
                "Trigonometry": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/math/pvector.js",
            "line": 31,
            "requires": [
                "core"
            ]
        },
        "Output": {
            "name": "Output",
            "submodules": {},
            "classes": {
                "Text Area": 1
            },
            "fors": {
                "Text Area": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/output/text_area.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Shape": {
            "name": "Shape",
            "submodules": {},
            "classes": {
                "2D Primitives": 1,
                "Attributes": 1,
                "Curves": 1,
                "Vertex": 1
            },
            "fors": {
                "2D Primitives": 1,
                "Attributes": 1,
                "Curves": 1,
                "Vertex": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/shape/2d_primitives.js",
            "line": 1,
            "requires": [
                "core",
                "canvas",
                "constants"
            ]
        },
        "Structure": {
            "name": "Structure",
            "submodules": {},
            "classes": {
                "Structure": 1
            },
            "fors": {
                "Structure": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/structure/structure.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Transform": {
            "name": "Transform",
            "submodules": {},
            "classes": {
                "Transform": 1
            },
            "fors": {
                "Transform": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/transform/transform.js",
            "line": 1,
            "requires": [
                "core",
                "constants",
                "linearalgebra"
            ]
        },
        "Typography": {
            "name": "Typography",
            "submodules": {},
            "classes": {},
            "fors": {
                "Attributes": 1,
                "Loading & Displaying": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/typography/attributes.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Constants": {
            "name": "Constants",
            "submodules": {},
            "classes": {
                "Constants": 1
            },
            "fors": {
                "Constants": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/var/constants.js",
            "line": 1
        }
    },
    "classes": {
        "Creating & Reading": {
            "name": "Creating & Reading",
            "shortname": "Creating & Reading",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Color",
            "namespace": ""
        },
        "Setting": {
            "name": "Setting",
            "shortname": "Setting",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Color",
            "namespace": ""
        },
        "Environment:Environment": {
            "name": "Environment:Environment",
            "shortname": "Environment:Environment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "*",
            "namespace": ""
        },
        "Structure:Structure": {
            "name": "Structure:Structure",
            "shortname": "Structure:Structure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "*",
            "namespace": ""
        },
        "Array Functions": {
            "name": "Array Functions",
            "shortname": "Array Functions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "namespace": ""
        },
        "String Functions": {
            "name": "String Functions",
            "shortname": "String Functions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "namespace": ""
        },
        "Manipulate": {
            "name": "Manipulate",
            "shortname": "Manipulate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DOM",
            "namespace": ""
        },
        "PElement": {
            "name": "PElement",
            "shortname": "PElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DOM",
            "namespace": ""
        },
        "DOM:PElement": {
            "name": "DOM:PElement",
            "shortname": "DOM:PElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DOM",
            "namespace": ""
        },
        "Environment": {
            "name": "Environment",
            "shortname": "Environment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Environment",
            "namespace": ""
        },
        "Image": {
            "name": "Image",
            "shortname": "Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Image",
            "namespace": ""
        },
        "Loading & Displaying": {
            "name": "Loading & Displaying",
            "shortname": "Loading & Displaying",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Image",
            "namespace": ""
        },
        "PImage": {
            "name": "PImage",
            "shortname": "PImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Image",
            "namespace": "",
            "file": "src/image/image.js",
            "line": 225,
            "description": "Creates a new PImage. A PImage is a canvas backed representation of an\nimage. p5 can display .gif, .jpg and .png images. Images may be displayed\nin 2D and 3D space. Before an image is used, it must be loaded with the\nloadImage() function. The PImage class contains fields for the width and\nheight of the image, as well as an array called pixels[] that contains the\nvalues for every pixel in the image. The methods described below allow\neasy access to the image's pixels and alpha channel and simplify the\nprocess of compositing.\n\nBefore using the pixels[] array, be sure to use the loadPixels() method on\nthe image to make sure that the pixel data is properly loaded.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pInst",
                    "description": "An instance of a p5 sketch.",
                    "type": "Object"
                }
            ]
        },
        "Pixels": {
            "name": "Pixels",
            "shortname": "Pixels",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Image",
            "namespace": ""
        },
        "Image:Pixels": {
            "name": "Image:Pixels",
            "shortname": "Image:Pixels",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Image",
            "namespace": ""
        },
        "Files": {
            "name": "Files",
            "shortname": "Files",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": ""
        },
        "Keyboard": {
            "name": "Keyboard",
            "shortname": "Keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": ""
        },
        "Mouse": {
            "name": "Mouse",
            "shortname": "Mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": ""
        },
        "Time & Date": {
            "name": "Time & Date",
            "shortname": "Time & Date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": ""
        },
        "Touch": {
            "name": "Touch",
            "shortname": "Touch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Input",
            "namespace": ""
        },
        "Calculation": {
            "name": "Calculation",
            "shortname": "Calculation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": ""
        },
        "Noise": {
            "name": "Noise",
            "shortname": "Noise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": ""
        },
        "PVector": {
            "name": "PVector",
            "shortname": "PVector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src/math/pvector.js",
            "line": 31,
            "description": "The PVector constructor function.\n\nA class to describe a two or three dimensional vector, specifically\na Euclidean (also known as geometric) vector. A vector is an entity\nthat has both magnitude and direction. The datatype, however, stores\nthe components of the vector (x,y for 2D, and x,y,z for 3D). The magnitude\nand direction can be accessed via the methods mag() and heading(). In many\nof the p5.js examples, you will see PVector used to describe a position,\nvelocity, or acceleration. For example, if you consider a rectangle moving\nacross the screen, at any given instant it has a position (a vector that\npoints from the origin to its location), a velocity (the rate at which the\nobject's position changes per time unit, expressed as a vector), and\nacceleration (the rate at which the object's velocity changes per time\nunit, expressed as a vector). Since vectors represent groupings of values,\nwe cannot simply use traditional addition/multiplication/etc. Instead,\nwe'll need to do some \"vector\" math, which is made easy by the methods\ninside the PVector class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "Math": {
            "name": "Math",
            "shortname": "Math",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": ""
        },
        "Random": {
            "name": "Random",
            "shortname": "Random",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": ""
        },
        "Trigonometry": {
            "name": "Trigonometry",
            "shortname": "Trigonometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": ""
        },
        "Text Area": {
            "name": "Text Area",
            "shortname": "Text Area",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Output",
            "namespace": ""
        },
        "2D Primitives": {
            "name": "2D Primitives",
            "shortname": "2D Primitives",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Shape",
            "namespace": ""
        },
        "Attributes": {
            "name": "Attributes",
            "shortname": "Attributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Shape",
            "namespace": ""
        },
        "Curves": {
            "name": "Curves",
            "shortname": "Curves",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Shape",
            "namespace": ""
        },
        "Vertex": {
            "name": "Vertex",
            "shortname": "Vertex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Shape",
            "namespace": ""
        },
        "Structure": {
            "name": "Structure",
            "shortname": "Structure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Structure",
            "namespace": ""
        },
        "Transform": {
            "name": "Transform",
            "shortname": "Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Transform",
            "namespace": ""
        },
        "Constants": {
            "name": "Constants",
            "shortname": "Constants",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Constants",
            "namespace": ""
        },
        "DOM:Manipulate": {
            "name": "DOM:Manipulate",
            "shortname": "DOM:Manipulate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "*",
            "namespace": ""
        },
        "p5.dom:p5.dom": {
            "name": "p5.dom:p5.dom",
            "shortname": "p5.dom:p5.dom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "*",
            "namespace": ""
        }
    },
    "classitems": [
        {
            "file": "src/color/creating_reading.js",
            "line": 12,
            "description": "Extracts the alpha value from a color.",
            "itemtype": "method",
            "name": "alpha",
            "params": [
                {
                    "name": "an",
                    "description": "array representing a color",
                    "type": "Array"
                }
            ],
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 26,
            "description": "Extracts the blue value from a color, scaled to match current colorMode().",
            "itemtype": "method",
            "name": "blue",
            "params": [
                {
                    "name": "an",
                    "description": "array representing a color",
                    "type": "Array"
                }
            ],
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 40,
            "description": "Extracts the brightness value from a color.",
            "itemtype": "method",
            "name": "brightness",
            "params": [
                {
                    "name": "an",
                    "description": "array representing a color",
                    "type": "Array"
                }
            ],
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 54,
            "description": "Creates colors for storing in variables of the color datatype. The\nparameters are interpreted as RGB or HSB values depending on the\ncurrent colorMode(). The default mode is RGB values from 0 to 255\nand, therefore, the function call color(255, 204, 0) will return a\nbright yellow color.\n\nNote that if only one value is provided to color(), it will be interpreted\nas a grayscale value. Add a second value, and it will be used for alpha\ntransparency. When three values are specified, they are interpreted as\neither RGB or HSB values. Adding a fourth value applies alpha\ntransparency.\n\nColors are stored as Numbers or Arrays.",
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value or red or hue value relative to the \n                         current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "gray value or green or saturation value relative\n                         to the current color range (or alpha value if\n                         first param is gray value)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "gray value or blue or brightness value relative\n                         to the current color range",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "alpha",
                    "description": "alpha value relative to current color range",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "resulting color",
                "type": "Array"
            },
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 84,
            "description": "Extracts the green value from a color, scaled to match current\ncolorMode().",
            "itemtype": "method",
            "name": "green",
            "params": [
                {
                    "name": "an",
                    "description": "array representing a color",
                    "type": "Array"
                }
            ],
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 99,
            "description": "Extracts the hue value from a color.",
            "itemtype": "method",
            "name": "hue",
            "params": [
                {
                    "name": "an",
                    "description": "array representing a color",
                    "type": "Array"
                }
            ],
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 113,
            "description": "Calculates a color or colors between two color at a specific increment.\nThe amt parameter is the amount to interpolate between the two values\nwhere 0.0 equal to the first point, 0.1 is very near the first point,\n0.5 is halfway in between, etc. An amount below 0 will be treated as 0.\nLikewise, amounts above 1 will be capped at 1. This is different from\nthe behavior of lerp(), but necessary because otherwise numbers outside\nthe range will produce strange and unexpected colors.",
            "itemtype": "method",
            "name": "lerpColor",
            "params": [
                {
                    "name": "c1",
                    "description": "interpolate from this color",
                    "type": "Array/Number"
                },
                {
                    "name": "c2",
                    "description": "interpolate to this color",
                    "type": "Array/Number"
                },
                {
                    "name": "amt",
                    "description": "number between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "interpolated color",
                "type": "Array/Number"
            },
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 140,
            "description": "Extracts the red value from a color, scaled to match current colorMode().",
            "itemtype": "method",
            "name": "red",
            "params": [
                {
                    "name": "rgb",
                    "description": "an array representing a color",
                    "type": "Array"
                }
            ],
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/creating_reading.js",
            "line": 154,
            "description": "Extracts the saturation value from a color.",
            "itemtype": "method",
            "name": "saturation",
            "params": [
                {
                    "name": "an",
                    "description": "array representing a color",
                    "type": "Array"
                }
            ],
            "class": "Creating & Reading",
            "module": "Color"
        },
        {
            "file": "src/color/setting.js",
            "line": 20,
            "description": "The background() function sets the color used for the background of the\np5.js canvas. The default background is light gray. This function is\ntypically used within draw() to clear the display window at the beginning\nof each frame, but it can be used inside setup() to set the background on\nthe first frame of animation or if the backgound need only be set once.",
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value (depending on the\n                           current color mode), or color Array",
                    "type": "Number|Array"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity of the background",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "class": "Setting",
            "module": "Color"
        },
        {
            "file": "src/color/setting.js",
            "line": 47,
            "description": "Clears the pixels within a buffer. This function only works on PGraphics\nobjects created with the createCanvas() function; it won't work with the\nmain display window. Unlike the main graphics context, pixels in\nadditional graphics areas created with createGraphics() can be entirely\nor partially transparent. This function clears everything to make all of\nthe pixels 100% transparent.",
            "itemtype": "method",
            "name": "clear",
            "class": "Setting",
            "module": "Color"
        },
        {
            "file": "src/color/setting.js",
            "line": 61,
            "description": "Changes the way p5.js interprets color data. By default, the parameters\nfor fill(), stroke(), background(), and color() are defined by values\nbetween 0 and 255 using the RGB color model. The colorMode() function is\nused to switch color systems.",
            "itemtype": "method",
            "name": "colorMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either RGB or HSB, corresponding to\n                              Red/Green/Blue and Hue/Saturation/Brightness",
                    "type": "Number|Constant"
                },
                {
                    "name": "max1",
                    "description": "range for the red or hue depending on the \n                              current color mode, or range for all values",
                    "type": "Number|Constant"
                },
                {
                    "name": "max2",
                    "description": "range for the green or saturation depending \n                              on the current color mode",
                    "type": "Number|Constant"
                },
                {
                    "name": "max3",
                    "description": "range for the blue or brightness depending\n                              on the current color mode",
                    "type": "Number|Constant"
                },
                {
                    "name": "maxA",
                    "description": "range for the alpha",
                    "type": "Number|Constant"
                }
            ],
            "class": "Setting",
            "module": "Color"
        },
        {
            "file": "src/color/setting.js",
            "line": 97,
            "description": "Sets the color used to fill shapes. For example, if you run\nfill(204, 102, 0), all subsequent shapes will be filled with orange. This\ncolor is either specified in terms of the RGB or HSB color depending on\nthe current colorMode(). (The default color space is RGB, with each value\nin the range from 0 to 255.)",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value (depending on the\n                           current color mode), or color Array",
                    "type": "Number|Array"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity of the background",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "class": "Setting",
            "module": "Color"
        },
        {
            "file": "src/color/setting.js",
            "line": 118,
            "description": "Disables filling geometry. If both noStroke() and noFill() are called,\nnothing will be drawn to the screen.",
            "itemtype": "method",
            "name": "noFill",
            "class": "Setting",
            "module": "Color"
        },
        {
            "file": "src/color/setting.js",
            "line": 128,
            "description": "Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen.",
            "itemtype": "method",
            "name": "noStroke",
            "class": "Setting",
            "module": "Color"
        },
        {
            "file": "src/color/setting.js",
            "line": 138,
            "description": "Sets the color used to draw lines and borders around shapes. This color\nis either specified in terms of the RGB or HSB color depending on the\ncurrent colorMode() (the default color space is RGB, with each value in\nthe range from 0 to 255).",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value (depending on the\n                           current color mode), or color Array",
                    "type": "Number|Array"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity of the background",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "class": "Setting",
            "module": "Color"
        },
        {
            "file": "src/color/setting.js",
            "line": 158,
            "description": "For a number of different inputs, returns a color formatted as\n[r, g, b, a].",
            "itemtype": "method",
            "name": "getNormalizedColor",
            "params": [
                {
                    "name": "args",
                    "description": "An 'array-like' object that represents a list of\n                         arguments",
                    "type": "Array-like"
                }
            ],
            "return": {
                "description": "a color formatted as [r, g, b, a]\n                         Example:\n                         input        ==> output\n                         g            ==> [g, g, g, 255]\n                         g,a          ==> [g, g, g, a]\n                         r, g, b      ==> [r, g, b, 255]\n                         r, g, b, a   ==> [r, g, b, a]\n                         [g]          ==> [g, g, g, 255]\n                         [g, a]       ==> [g, g, g, a]\n                         [r, g, b]    ==> [r, g, b, 255]\n                         [r, g, b, a] ==> [r, g, b, a]",
                "type": "Array"
            },
            "class": "Setting",
            "module": "Color"
        },
        {
            "file": "src/core/core.js",
            "line": 14,
            "description": "p5\n\nThis is the p5 instance constructor.\n\nA p5 instance holds all the properties and methods related to\na p5 sketch.  It expects an incoming sketch closure with optional\npreload(), setup() and draw() properties to attach to this p5\ninstance for running a sketch.  It can also take an optional node\nparameter for attaching the generated p5 canvas to a node.\n\nA p5 sketch can run in \"global\" or \"instance\" mode:\n\"global\"   - all properties and methods are attached to the window\n\"instance\" - all properties and methods are bound to this p5 object",
            "params": [
                {
                    "name": "sketch",
                    "description": "a closure with optional preload(), setup()\n                              and draw() properties",
                    "type": "Function"
                },
                {
                    "name": "node",
                    "description": "an element to attach the generated canvas to",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "a p5 instance",
                "type": "P5"
            },
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 40,
            "description": "The system variable frameCount contains the number of frames that have\nbeen displayed since the program started. Inside setup() the value is 0,\nafter the first iteration of draw it is 1, etc.",
            "itemtype": "property",
            "name": "frameCount",
            "example": [
                "\n  <div><code>\n    function setup() {\n      frameRate(30);\n    }\n\n    function draw() {\n      line(0, 0, width, height);\n      print(frameCount);\n    }\n  </code></div>"
            ],
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 61,
            "description": "Confirms if a p5.js program is \"focused,\" meaning that it is active and\nwill accept mouse or keyboard input. This variable is \"true\" if it is\nfocused and \"false\" if not.",
            "itemtype": "property",
            "name": "focused",
            "example": [
                "\n  <div><code>\n    if (focused) {  // or \"if (focused === true)\"\n      ellipse(25, 25, 50, 50);\n    } else {\n      line(0, 0, 100, 100);\n      line(100, 0, 0, 100);\n    }\n  </code></div>"
            ],
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 80,
            "description": "System variable that stores the width of the entire screen display. This\nis used to run a full-screen program on any display size.",
            "itemtype": "property",
            "name": "displayWidth",
            "example": [
                "\n  <div><code>\n    size(displayWidth, displayHeight);\n  </code></div>"
            ],
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 93,
            "description": "System variable that stores the height of the entire screen display. This\nis used to run a full-screen program on any display size.",
            "itemtype": "property",
            "name": "displayHeight",
            "example": [
                "\n  <div><code>\n    size(displayWidth, displayHeight);\n  </code></div>"
            ],
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 106,
            "description": "System variable that stores the width of the inner window, it maps to\nwindow.innerWidth",
            "itemtype": "property",
            "name": "windowWidth",
            "example": [
                "\n  <div><code>\n    size(windowWidth, windowHeight);\n  </code></div>"
            ],
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 119,
            "description": "System variable that stores the height of the inner window, it maps to\nwindow.innerHeight",
            "itemtype": "property",
            "name": "windowHeight",
            "example": [
                "\n  <div><code>\n    size(windowWidth, windowHeight);\n  </code></div>"
            ],
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 132,
            "description": "System variable that stores the width of the drawing canvas. This value\nis set by the first parameter of the createCanvas() function.\nFor example, the function call createCanvas(320, 240) sets the width\nvariable to the value 320. The value of width defaults to 100 if\ncreateCanvas() is not used in a program.",
            "itemtype": "property",
            "name": "width",
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 144,
            "description": "System variable that stores the height of the drawing canvas. This value\nis set by the second parameter of the createCanvas() function. For\nexample, the function call createCanvas(320, 240) sets the height\nvariable to the value 240. The value of height defaults to 100 if\ncreateCanvas() is not used in a program.",
            "itemtype": "property",
            "name": "height",
            "class": "Environment:Environment",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 156,
            "description": "The setup() function is called once when the program starts. It's used to\ndefine initial enviroment properties such as screen size and background\ncolor and to load media such as images and fonts as the program starts.\nThere can only be one setup() function for each program and it shouldn't\nbe called again after its initial execution. Note: Variables declared\nwithin setup() are not accessible within other functions, including\ndraw().",
            "itemtype": "method",
            "name": "setup",
            "example": [
                "\n  <div><code>\n    var a = 0;\n\n    function setup() {\n      createCanvas(200, 200);\n      background(0);\n      noStroke();\n      fill(102);\n    }\n\n    function draw() {\n      rect(a++%width, 10, 2, 80); \n    }\n  </code></div>"
            ],
            "class": "Structure:Structure",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 184,
            "description": "Called directly after setup(), the draw() function continuously executes\nthe lines of code contained inside its block until the program is stopped\nor noLoop() is called. draw() is called automatically and should never be\ncalled explicitly.\n\nIt should always be controlled with noLoop(), redraw() and loop(). After\nnoLoop() stops the code in draw() from executing, redraw() causes the\ncode inside draw() to execute once, and loop() will cause the code\ninside draw() to resume executing continuously.\n\nThe number of times draw() executes in each second may be controlled with\nthe frameRate() function.\n\nThere can only be one draw() function for each sketch, and draw() must\nexist if you want the code to run continuously, or to process events such\nas mousePressed(). Sometimes, you might have an empty call to draw() in\nyour program, as shown in the above example.",
            "itemtype": "method",
            "name": "draw",
            "class": "Structure:Structure",
            "module": "*"
        },
        {
            "file": "src/core/core.js",
            "line": 207,
            "itemtype": "method",
            "name": "remove",
            "class": "Structure:Structure",
            "module": "*"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 12,
            "description": "Adds a value to an Array, maps to Array.push.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "array",
                    "description": "Array to append",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "to be added to the Array",
                    "type": "Any"
                }
            ],
            "class": "Array Functions",
            "module": "Data"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 24,
            "description": "Copies an array (or part of an array) to another array. The src array is\ncopied to the dst array, beginning at the position specified by\nsrcPosition and into the position specified by dstPosition. The number of\nelements to copy is determined by length. Note that copying values\noverwrites existing values in the destination array. To append values\ninstead of overwriting them, use concat().\n\nThe simplified version with only two arguments — arrayCopy(src, dst) —\ncopies an entire array to another of the same size. It is equivalent to\narrayCopy(src, 0, dst, 0, src.length).\n\nUsing this function is far more efficient for copying array data than\niterating through a for() loop and copying each element individually.",
            "itemtype": "method",
            "name": "arrayCopy",
            "params": [
                {
                    "name": "src",
                    "description": "the source Array",
                    "type": "Array"
                },
                {
                    "name": "srcPosition",
                    "description": "starting position in the source Array",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "dst",
                    "description": "the destination Array",
                    "type": "Array"
                },
                {
                    "name": "dstPosition",
                    "description": "starting position in the destination Array",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "length",
                    "description": "number of Array elements to be copied",
                    "type": "Nimber",
                    "optional": true
                }
            ],
            "class": "Array Functions",
            "module": "Data"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 86,
            "description": "Concatenates two arrays, maps to Array.concat(). For example,\nconcatenating the array { 1, 2, 3 } and the array { 4, 5, 6 } yields\n{ 1, 2, 3, 4, 5, 6 }.",
            "itemtype": "method",
            "name": "concat",
            "params": [
                {
                    "name": "a",
                    "description": "first Array to concatenate",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "second Array to concatenate",
                    "type": "Array"
                }
            ],
            "class": "Array Functions",
            "module": "Data"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 99,
            "description": "Reverses the order of an array, maps to Array.reverse()",
            "itemtype": "method",
            "name": "reverse",
            "params": [
                {
                    "name": "list",
                    "description": "Array to reverse",
                    "type": "Array"
                }
            ],
            "class": "Array Functions",
            "module": "Data"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 109,
            "description": "Decreases an array by one element and returns the shortened array,\nmaps to Array.pop().",
            "itemtype": "method",
            "name": "shorten",
            "params": [
                {
                    "name": "list",
                    "description": "Array to shorten",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "shortened Array",
                "type": "Array"
            },
            "class": "Array Functions",
            "module": "Data"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 122,
            "description": "Sorts an array of numbers from smallest to largest, or puts an array of\nwords in alphabetical order. The original array is not modified; a\nre-ordered array is returned. The count parameter states the number of\nelements to sort. For example, if there are 12 elements in an array and\ncount is set to 5, only the first 5 elements in the array will be sorted.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "list",
                    "description": "Array to sort",
                    "type": "Array"
                },
                {
                    "name": "count",
                    "description": "number of elements to sort, starting from 0",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Array Functions",
            "module": "Data"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 144,
            "description": "Inserts a value or an array of values into an existing array. The first\nparameter specifies the intial array to be modified, and the second\nparameter defines the data to be inserted. The third parameter is an index\nvalue which specifies the array position from which to insert data.\n(Remember that array index numbering starts at zero, so the first position\nis 0, the second position is 1, and so on.)",
            "itemtype": "method",
            "name": "splice",
            "params": [
                {
                    "name": "list",
                    "description": "Array to splice into",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "value to be spliced in",
                    "type": "Any"
                },
                {
                    "name": "position",
                    "description": "in the array from which to insert data",
                    "type": "Number"
                }
            ],
            "class": "Array Functions",
            "module": "Data"
        },
        {
            "file": "src/data/array_functions.js",
            "line": 165,
            "description": "Extracts an array of elements from an existing array. The list parameter\ndefines the array from which the elements will be copied, and the start\nand count parameters specify which elements to extract. If no count is\ngiven, elements will be extracted from the start to the end of the array.\nWhen specifying the start, remember that the first array element is 0.\nThis function does not change the source array.",
            "itemtype": "method",
            "name": "subset",
            "params": [
                {
                    "name": "list",
                    "description": "Array to extract from",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "position to begin",
                    "type": "Number"
                },
                {
                    "name": "count",
                    "description": "number of values to extract",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of extracted elements",
                "type": "Array"
            },
            "class": "Array Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 14,
            "description": "Combines an array of Strings into one String, each separated by the\ncharacter(s) used for the separator parameter. To join arrays of ints or\nfloats, it's necessary to first convert them to Strings using nf() or\nnfs().",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "list",
                    "description": "array of Strings to be joined",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "String to be placed between each item",
                    "type": "String"
                }
            ],
            "return": {
                "description": "joined String",
                "type": "String"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 29,
            "description": "This function is used to apply a regular expression to a piece of text,\nand return matching groups (elements found inside parentheses) as a\nString array. If there are no matches, a null value will be returned.\nIf no groups are specified in the regular expression, but the sequence\nmatches, an array of length 1 (with the matched text as the first element\nof the array) will be returned.\n\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, an array is returned.\n\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nElement [0] of a regular expression match returns the entire matching\nstring, and the match groups start at element [1] (the first group is [1],\nthe second [2], and so on).",
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be searched",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "the regexp to be used for matching",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Strings found",
                "type": "Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 56,
            "description": "This function is used to apply a regular expression to a piece of text,\nand return a list of matching groups (elements found inside parentheses)\nas a two-dimensional String array. If there are no matches, a null value\nwill be returned. If no groups are specified in the regular expression,\nbut the sequence matches, a two dimensional array is still returned, but\nthe second dimension is only of length one.\n\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, a 2D array is returned.\n\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nAssuming a loop with counter variable i, element [i][0] of a regular\nexpression match returns the entire matching string, and the match groups\nstart at element [i][1] (the first group is [i][1], the second [i][2],\nand so on).",
            "itemtype": "method",
            "name": "matchAll",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be searched",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "the regexp to be used for matching",
                    "type": "String"
                }
            ],
            "return": {
                "description": "2d Array of Strings found",
                "type": "Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 94,
            "description": "Utility function for formatting numbers into strings. There are two\nversions: one for formatting floats, and one for formatting ints.\nThe values for the digits, left, and right parameters should always\nbe positive integers.",
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|Array"
                },
                {
                    "name": "digits",
                    "description": "number of digits to pad with zero",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the\n                               decimal point",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String|Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 145,
            "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions: one\nfor formatting ints, and one for formatting an array of ints. The value\nfor the right parameter should always be a positive integer.",
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|Array"
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                                 decimal point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String|Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 178,
            "description": "Utility function for formatting numbers into strings. Similar to nf() but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for the digits, left, and right parameters\nshould always be positive integers.",
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|Array"
                },
                {
                    "name": "digits",
                    "description": "number of digits to pad with zero",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the decimal\n                               point",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String|Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 210,
            "description": "Utility function for formatting numbers into strings. Similar to nf() but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for the digits, left, and right parameters\nshould always be positive integers.",
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|Array"
                },
                {
                    "name": "digits",
                    "description": "number of digits to pad with zero",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the decimal\n                               point",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String|Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 242,
            "description": "The split() function maps to String.split(), it breaks a String into\npieces using a character or string as the delimiter. The delim parameter\nspecifies the character or characters that mark the boundaries between\neach piece. A String[] array is returned that contains each of the pieces.\n\nThe splitTokens() function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "value",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "the String used to separate the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 261,
            "description": "The splitTokens() function splits a String at one or many character\ndelimiters or \"tokens.\" The delim parameter specifies the character or\ncharacters to be used as a boundary.\n\nIf no delim characters are specified, any whitespace character is used to\nsplit. Whitespace characters include tab (\\t), line feed (\\n), carriage\nreturn (\\r), form feed (\\f), and space.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "value",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "list of individual Strings that will be used as\n                         separators",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/data/string_functions.js",
            "line": 281,
            "description": "Removes whitespace characters from the beginning and end of a String. In\naddition to standard whitespace characters such as space, carriage return,\nand tab, this function also removes the Unicode \"nbsp\" character.",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "a String or Array of Strings to be trimmed",
                    "type": "String|Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "a trimmed String or Array of Strings",
                "type": "String|Array"
            },
            "class": "String Functions",
            "module": "Data"
        },
        {
            "file": "src/dom/manipulate.js",
            "line": 13,
            "description": "Creates a canvas element in the document.",
            "itemtype": "method",
            "name": "createCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "width of the canvas",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the canvas",
                    "type": "Number"
                },
                {
                    "name": "isDefault",
                    "description": "whether the canvas is a default one",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "Manipulate",
            "module": "DOM"
        },
        {
            "file": "src/dom/pelement.js",
            "line": 22,
            "description": "Attaches the element to the parent specified. A way of setting\n the container for the element. Accepts either a string ID or\n DOM node.",
            "itemtype": "method",
            "name": "parent",
            "params": [
                {
                    "name": "parent",
                    "description": "the ID or node of the parent elt",
                    "type": "String|Object"
                }
            ],
            "class": "DOM:PElement",
            "module": "DOM"
        },
        {
            "file": "src/dom/pelement.js",
            "line": 39,
            "description": "Sets the inner HTML of the element. Replaces any existing html.",
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "html",
                    "description": "the HTML to be placed inside the element",
                    "type": "String"
                }
            ],
            "class": "DOM:PElement",
            "module": "DOM"
        },
        {
            "file": "src/dom/pelement.js",
            "line": 51,
            "description": "Sets the position of the element relative to (0, 0) of the\n window. Essentially, sets position:absolute and left and top\n properties of style.",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "x",
                    "description": "x-position relative to upper left of window",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-position relative to upper left of window",
                    "type": "Number"
                }
            ],
            "class": "DOM:PElement",
            "module": "DOM"
        },
        {
            "file": "src/dom/pelement.js",
            "line": 73,
            "description": "Sets the ID of the element",
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the element",
                    "type": "String"
                }
            ],
            "class": "DOM:PElement",
            "module": "DOM"
        },
        {
            "file": "src/dom/pelement.js",
            "line": 85,
            "description": "Adds given class to the element",
            "itemtype": "method",
            "name": "class",
            "params": [
                {
                    "name": "class",
                    "description": "class to add",
                    "type": "String"
                }
            ],
            "class": "DOM:PElement",
            "module": "DOM"
        },
        {
            "file": "src/dom/pelement.js",
            "line": 97,
            "description": "The .mousePressed() function is called once after every time a \nmouse button is pressed over the element. This can be used to\nattach an element specific event listeners.",
            "itemtype": "method",
            "name": "mousePressed",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   pressed over the element.",
                    "type": "Function"
                }
            ],
            "class": "DOM:PElement",
            "module": "DOM"
        },
        {
            "file": "src/dom/pelement.js",
            "line": 111,
            "description": "The .mouseOver() function is called once after every time a \nmouse moves onto the element. This can be used to attach an \nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseOver",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   moved over the element.",
                    "type": "Function"
                }
            ],
            "class": "DOM:PElement",
            "module": "DOM"
        },
        {
            "file": "src/dom/pelement.js",
            "line": 125,
            "description": "The .mouseOut() function is called once after every time a \nmouse moves off the element. This can be used to attach an \nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseOut",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                   moved off the element.",
                    "type": "Function"
                }
            ],
            "class": "DOM:PElement",
            "module": "DOM"
        },
        {
            "file": "src/environment/environment.js",
            "line": 20,
            "description": "Sets the cursor to a predefined symbol or an image, or makes it visible\nif already hidden. If you are trying to set an image as the cursor, the\nrecommended size is 16x16 or 32x32 pixels. It is not possible to load an\nimage as the cursor if you are exporting your program for the Web, and not\nall MODES work with all browsers. The values for parameters x and y must\nbe less than the dimensions of the image.",
            "itemtype": "method",
            "name": "cursor",
            "params": [
                {
                    "name": "type",
                    "description": "either ARROW, CROSS, HAND, MOVE, TEXT, or\n                              WAIT, or path for image",
                    "type": "Number/Constant"
                },
                {
                    "name": "x",
                    "description": "the horizontal active spot of the cursor",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the vertical active spot of the cursor",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Environment",
            "module": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 61,
            "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within setup() is\nrecommended. The default rate is 60 frames per second. This is the same as\nsetFrameRate(val).\n\nCalling frameRate() with no arguments returns the current framerate. This\nis the same as getFrameRate().",
            "itemtype": "method",
            "name": "frameRate",
            "params": [
                {
                    "name": "fps",
                    "description": "number of frames to be displayed every second",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "current frameRate",
                "type": "Number"
            },
            "class": "Environment",
            "module": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 85,
            "description": "Returns the current framerate.",
            "return": {
                "description": "current frameRate",
                "type": "Number"
            },
            "class": "Environment",
            "module": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 94,
            "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within setup() is\nrecommended. The default rate is 60 frames per second.\n\nCalling frameRate() with no arguments returns the current framerate.",
            "params": [
                {
                    "name": "fps",
                    "description": "number of frames to be displayed every second",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Environment",
            "module": "Environment"
        },
        {
            "file": "src/environment/environment.js",
            "line": 109,
            "description": "Hides the cursor from view.",
            "itemtype": "method",
            "name": "noCursor",
            "class": "Environment",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 5,
            "description": "This module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implmentation.",
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 31,
            "description": "Returns the pixel buffer for a canvas",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "the canvas to get pixels from",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "a one-dimensional array containing\n                                  the data in thc RGBA order, with integer\n                                  values between 0 and 255",
                "type": "Uint8ClampedArray"
            },
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 54,
            "description": "Returns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "array returned by _toPixels()",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "i",
                    "description": "index of a 1D Image Array",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "32 bit integer value representing\n                                 ARGB value.",
                "type": "Integer"
            },
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 73,
            "description": "Modifies pixels RGBA values to values contained in the data object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pixels",
                    "description": "array returned by _toPixels()",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "data",
                    "description": "source 1D array where each value\n                                  represents ARGB values",
                    "type": "Int32Array"
                }
            ],
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 93,
            "description": "Returns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "canvas to get image data from",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "Holder of pixel data (and width and\n                                  height) for a canvas",
                "type": "ImageData"
            },
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 116,
            "description": "Returns a blank ImageData object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "ImageData"
            },
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 132,
            "description": "Applys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes\nactually visible in the canvas.\n\nThe apply method is the method that callers of this module would generally\nuse. It has been separated from the actual filters to support an advanced\nuse case of creating a filter chain that executes without actually updating\nthe canvas in between everystep.",
            "params": [
                {
                    "name": "func",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "canvas",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "level",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 171,
            "description": "Converts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 206,
            "description": "Converts any colors in the image to grayscale equivalents.\nNo parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 228,
            "description": "Sets the alpha channel to entirely opaque. No parameter is used.",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 243,
            "description": "Sets each pixel to its inverse value. No parameter is used.",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Invert"
                }
            ],
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 259,
            "description": "Limits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 293,
            "description": "reduces the bright areas in an image",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/filters.js",
            "line": 374,
            "description": "increases the bright areas in an image",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "Image",
            "module": "Environment"
        },
        {
            "file": "src/image/image.js",
            "line": 10,
            "description": "This module defines the PImage class and P5 methods for\ndrawing images to the main display canvas.",
            "class": "Image",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 29,
            "description": "Creates a new PImage (the datatype for storing images). This provides a\nfresh buffer of pixels to play with. Set the size of the buffer with the\nwidth and height parameters.",
            "itemtype": "method",
            "name": "createImage",
            "params": [
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the PImage object",
                "type": "PImage"
            },
            "class": "Image",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 44,
            "description": "Loads an image from a path and creates a PImage from it.\n\nThe image may not be immediately available for rendering\nIf you want to ensure that the image is ready before doing\nanything with it you can do perform those operations in the\ncallback, or place the loadImage() call in preload().",
            "itemtype": "method",
            "name": "loadImage",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called once the image is\n                            loaded. Will be passed the PImage.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the PImage object",
                "type": "PImage"
            },
            "class": "Loading & Displaying",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 86,
            "description": "Draw an image to the main canvas of the p5js sketch",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "image",
                    "description": "the image to display",
                    "type": "PImage"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the image",
                    "type": "[type]"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the image",
                    "type": "[type]"
                },
                {
                    "name": "width",
                    "description": "width to display the image",
                    "type": "[type]"
                },
                {
                    "name": "height",
                    "description": "height to display the image",
                    "type": "[type]"
                }
            ],
            "class": "Loading & Displaying",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 123,
            "description": "Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by including an alpha value.\n\nTo apply transparency to an image without affecting its color, use \nwhite as the tint color and specify an alpha value. For instance, \ntint(255, 128) will make an image 50% transparent (assuming the default\nalpha range of 0-255, which can be changed with colorMode()). \n\nThe value for the gray parameter must be less than or equal to the current\nmaximum value as specified by colorMode(). The default maximum value is\n255.",
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value (depending on the\n                           current color mode), or color Array",
                    "type": "Number|Array"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value (depending on the\n                           current color mode)",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity of the background",
                    "type": "Number|Array",
                    "optional": true
                }
            ],
            "class": "Loading & Displaying",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 151,
            "description": "Removes the current fill value for displaying images and reverts to\ndisplaying images with their original hues.",
            "itemtype": "method",
            "name": "noTint",
            "class": "Loading & Displaying",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 162,
            "description": "Apply the current tint color to the input image, return the resulting\ncanvas.",
            "params": [
                {
                    "name": "The",
                    "description": "image to be tinted",
                    "type": "PImage"
                }
            ],
            "return": {
                "description": "The resulting tinted canvas",
                "type": "Canvas"
            },
            "class": "Loading & Displaying",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 194,
            "description": "Set image mode. Modifies the location from which images are drawn by\nchanging the way in which parameters given to image() are intepreted.\nThe default mode is imageMode(CORNER), which interprets the second and\nthird parameters of image() as the upper-left corner of the image. If\ntwo additional parameters are specified, they are used to set the image's\nwidth and height.\n\nimageMode(CORNERS) interprets the second and third parameters of image()\nas the location of one corner, and the fourth and fifth parameters as the\nopposite corner.\nimageMode(CENTER) interprets the second and third parameters of image()\nas the image's center point. If two additional parameters are specified,\nthey are used to set the image's width and height.",
            "itemtype": "method",
            "name": "imageMode",
            "params": [
                {
                    "name": "m",
                    "description": "The mode: either CORNER, CORNERS, or CENTER.",
                    "type": "String"
                }
            ],
            "class": "Loading & Displaying",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 245,
            "description": "Image width.",
            "itemtype": "property",
            "name": "width",
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 251,
            "description": "Image height.",
            "itemtype": "property",
            "name": "height",
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 260,
            "description": "Array containing the color of every pixel in the image.",
            "itemtype": "property",
            "name": "pixels[]",
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 269,
            "description": "Helper fxn for sharing pixel methods",
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 277,
            "description": "Loads the pixels data for this image into the [pixels] attribute.",
            "itemtype": "method",
            "name": "loadPixels",
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 287,
            "description": "Updates the backing canvas for this image with the contents of\nthe [pixels] array.",
            "itemtype": "method",
            "name": "updatePixels",
            "params": [
                {
                    "name": "x",
                    "description": "x-offset of the target update area for the\n                             underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "y",
                    "description": "y-offset of the target update area for the\n                             underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "w",
                    "description": "height of the target update area for the\n                             underlying canvas",
                    "type": "Integer|undefined"
                },
                {
                    "name": "h",
                    "description": "height of the target update area for the\n                             underlying canvas",
                    "type": "Integer|undefined"
                }
            ],
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 306,
            "description": "Get a region of pixels from an image.\n\nIf no params are passed, those whole image is returned,\nif x and y are the only params passed a single pixel is extracted\nif all params are passed a rectangle region is extracted and a Pimage is\nreturned.\n\nReturns undefined if the region is outside the bounds of the image",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "color of pixel at x,y in array format\n                                   [R, G, B, A] or PImage",
                "type": "Array/Color | PImage"
            },
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 329,
            "description": "Set the color of a single pixel or write an image into\nthis PImage.\n\nNote that for a large number of pixels this will\nbe slower than directly manipulating the pixels array\nand then calling updatePixels()\n\nTODO: Should me make the update operation toggleable?",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "insert",
                    "description": "a grayscale value |\n                               a color array | image to copy",
                    "type": "Number|Array|Object"
                }
            ],
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 351,
            "description": "Resize the image to a new width and height. To make the image scale\nproportionally, use 0 as the value for the wide or high parameter.\nFor instance, to make the width of an image 150 pixels, and change\nthe height using the same proportion, use resize(150, 0).",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "the resized image width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the resized image height",
                    "type": "Number"
                }
            ],
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 399,
            "description": "Copies a region of pixels from one image to another. If no\nsrcImage is specified this is used as the source. If the source\nand destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "PImage|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 422,
            "description": "Masks part of an image from displaying by loading another\nimage and using it's alpha channel as an alpha channel for\nthis image.",
            "itemtype": "method",
            "name": "mask",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image\n\nTODO: - Accept an array of alpha values.\n      - Use other channels of an image. p5 uses the\n      blue channel (which feels kind of arbitrary). Note: at the\n      moment this method does not match native processings original\n      functionality exactly.\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "PImage|undefined"
                }
            ],
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 463,
            "description": "Applies an image filter to a PImage",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "operation",
                    "description": "one of threshold, gray, invert, posterize and \n                          opaque see Filters.js for docs on each available\n                          filter",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|undefined"
                }
            ],
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 477,
            "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.",
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "PImage|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode\n\nAvailable blend modes are: normal | multiply | screen | overlay | \n           darken | lighten | color-dodge | color-burn | hard-light | \n           soft-light | difference | exclusion | hue | saturation | \n           color | luminosity\n\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "Integer"
                }
            ],
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/image.js",
            "line": 507,
            "description": "Saves the image to a file and forces the browser to download it.\nSupports png and jpg.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "extension!~YUIDOC_LINE~!!~YUIDOC_LINE~!TODO:",
                    "description": "There doesn't seem to be a way to give the force the\nbrowser to download a file *and* give it a name. Which is why \nthis function currently only take an extension parameter.",
                    "type": "[type]"
                }
            ],
            "class": "PImage",
            "module": "Image"
        },
        {
            "file": "src/image/pixels.js",
            "line": 13,
            "description": "Array containing the values for all the pixels in the display window.\nThese values are of the color datatype. This array is the size of the\ndisplay window. For example, if the image is 100x100 pixels, there will\nbe 10000 values and if the window is 200x300 pixels, there will be 60000\nvalues. The index value defines the position of a value within the\narray.\n\nBefore accessing this array, the data must loaded with the loadPixels()\nfunction. After the array data has been modified, the updatePixels()\nfunction must be run to update the changes.",
            "itemtype": "property",
            "name": "pixels[]",
            "class": "Image:Pixels",
            "module": "Image"
        },
        {
            "file": "src/image/pixels.js",
            "line": 41,
            "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.",
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "PImage|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode\n\nAvailable blend modes are: normal | multiply | screen | overlay | \n           darken | lighten | color-dodge | color-burn | hard-light | \n           soft-light | difference | exclusion | hue | saturation | \n           color | luminosity\n\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "Integer"
                }
            ],
            "class": "Image:Pixels",
            "module": "Image"
        },
        {
            "file": "src/image/pixels.js",
            "line": 80,
            "description": "Copies a region of the canvas to another region of the canvas  \nand copies a region of pixels from an image used as the srcImg parameter\ninto the canvas srcImage is specified this is used as the source. If\nthe source and destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "PImage|undefined"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "class": "Image:Pixels",
            "module": "Image"
        },
        {
            "file": "src/image/pixels.js",
            "line": 131,
            "description": "Applies a filter to the canvas",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "operation",
                    "description": "one of threshold, gray, invert,\n                                     posterize and opaque. see filters.js\n                                     for docs on each available filter",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|undefined"
                }
            ],
            "class": "Image:Pixels",
            "module": "Image"
        },
        {
            "file": "src/image/pixels.js",
            "line": 144,
            "description": "Reads the color of any pixel or grabs a section of an image. If no\nparameters are specified, the entire image is returned. Use the x and y\nparameters to get the value of one pixel. Get a section of the display\nwindow by specifying additional w and h parameters. When getting an image,\nthe x and y parameters define the coordinates for the upper-left corner of\nthe image, regardless of the current imageMode().\n\nIf the pixel requested is outside of the image window, black is returned.\nThe numbers returned are scaled according to the current color ranges, but\nonly RGB values are returned by this function. For example, even though\nyou may have drawn a shape with colorMode(HSB), the numbers returned will\nbe in RGB format. \n\nGetting the color of a single pixel with get(x, y) is easy, but not as fast\nas grabbing the data directly from pixels[]. The equivalent statement to\nget(x, y) using pixels[] is pixels[y*width+x]. See the reference for\npixels[] for more information.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "color of pixel at x,y in array format\n                          [R, G, B, A] or PImage",
                "type": "Array/Color"
            },
            "class": "Image:Pixels",
            "module": "Image"
        },
        {
            "file": "src/image/pixels.js",
            "line": 211,
            "description": "Loads the pixel data for the display window into the pixels[] array. This\nfunction must always be called before reading from or writing to pixels[].",
            "itemtype": "method",
            "name": "loadPixels",
            "class": "Image:Pixels",
            "module": "Image"
        },
        {
            "file": "src/image/pixels.js",
            "line": 233,
            "description": "Changes the color of any pixel, or writes an image directly to the display\nwindow.\n\nThe x and y parameters specify the pixel to change and the c parameter\nspecifies the color value. The c parameter is interpreted according to the\ncurrent color mode. (The default color mode is RGB values from 0 to 255.)\nWhen setting an image, the x and y parameters define the coordinates for\nthe upper-left corner of the image, regardless of the current imageMode(). \n\nSetting the color of a single pixel with set(x, y) is easy, but not as\nfast as putting the data directly into pixels[]. The equivalent statement\nto set(x, y, #000000) using pixels[] is pixels[y*width+x] = #000000.\nSee the reference for pixels[] for more information.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "insert",
                    "description": "a grayscale value | a color array |\n                               image to copy",
                    "type": "Number|Array|Object"
                }
            ],
            "class": "Image:Pixels",
            "module": "Image"
        },
        {
            "file": "src/image/pixels.js",
            "line": 281,
            "description": "Updates the display window with the data in the pixels[] array.\nUse in conjunction with loadPixels(). If you're only reading pixels from\nthe array, there's no need to call updatePixels() — updating is only\nnecessary to apply changes.",
            "itemtype": "method",
            "name": "updatePixels",
            "class": "Image:Pixels",
            "module": "Image"
        },
        {
            "file": "src/input/files.js",
            "line": 30,
            "description": "Loads a JSON file from a file or a URL, and returns an Object or Array.\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed, either use preload() to guarantee the\nfile loads before setup() and draw() are called, or supply a callback\nfunction that is executed when loadStrings() completes.",
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   loadJSON()\n                                   completes, Array is passed in as first\n                                   argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "JSON data",
                "type": "Object|Array"
            },
            "class": "Files",
            "module": "Input"
        },
        {
            "file": "src/input/files.js",
            "line": 59,
            "description": "Reads the contents of a file and creates a String array of its individual\nlines. If the name of the file is used as the parameter, as in the above\nexample, the file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed, either use preload() to guarantee the\nfile loads before setup() and draw() are called, or supply a callback\nfunction that is executed when loadStrings() completes.",
            "itemtype": "method",
            "name": "loadStrings",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after loadStrings()\n                              completes, Array is passed in as first\n                              argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "Array"
            },
            "class": "Files",
            "module": "Input"
        },
        {
            "file": "src/input/files.js",
            "line": 107,
            "description": "Reads the contents of a file and creates an XML object with its values.\nIf the name of the file is used as the parameter, as in the above example,\nthe file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed, either use preload() to guarantee the\nfile loads before setup() and draw() are called, or supply a callback\nfunction that is executed when loadXML() completes.",
            "itemtype": "method",
            "name": "loadXML",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after loadXML()\n                              completes, XML object is passed in as\n                              first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "XML object containing data",
                "type": "Object"
            },
            "class": "Files",
            "module": "Input"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 12,
            "description": "The boolean system variable isKeyPressed is true if any key is pressed\nand false if no keys are pressed.",
            "itemtype": "property",
            "name": "isKeyPressed",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 21,
            "description": "The system variable key always contains the value of the most recent\nkey on the keyboard that was typed. For non-ASCII keys, use the keyCode\nvariable.",
            "itemtype": "property",
            "name": "key",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 30,
            "description": "The variable keyCode is used to detect special keys such as the UP,\nDOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT.",
            "itemtype": "property",
            "name": "keyCode",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 38,
            "description": "The keyPressed() function is called once every time a key is pressed.",
            "itemtype": "method",
            "name": "keyPressed",
            "example": [
                "\n  <div>\n    <code>\n      // Click within the image to change \n      // the value of the rectangle\n      \n      var value = 0;\n      function draw() {\n        fill(value);\n        rect(25, 25, 50, 50);\n      }\n      function keyPressed() {\n        if (value == 0) {\n          value = 255;\n        } else {\n          value = 0;\n        }\n      }\n    </code>\n  </div>"
            ],
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 71,
            "description": "The keyReleased() function is called once every time a key is released.\nSee key and keyReleased for more information. For non-ASCII keys, use\nthe keyCode variable.",
            "itemtype": "method",
            "name": "keyReleased",
            "example": [
                "\n  <div>\n    <code>\n      // Click within the image to change \n      // the value of the rectangle\n      \n      var value = 0;\n      function draw() {\n        fill(value);\n        rect(25, 25, 50, 50);\n      }\n      function keyReleased() {\n        if (value == 0) {\n          value = 255;\n        } else {\n          value = 0;\n        }\n      }\n    </code>\n  </div>"
            ],
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "src/input/keyboard.js",
            "line": 107,
            "description": "The keyTyped() function is called once every time a key is pressed, but\naction keys such as Ctrl, Shift, and Alt are ignored. The most recent\nkey pressed will be stored in the key variable.",
            "itemtype": "method",
            "name": "keyTyped",
            "class": "Keyboard",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 15,
            "description": "The system variable mouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the canvas.",
            "itemtype": "property",
            "name": "mouseX",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 23,
            "description": "The system variable mouseY always contains the current vertical position\nof the mouse, relative to (0, 0) of the canvas.",
            "itemtype": "property",
            "name": "mouseY",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 31,
            "description": "The system variable pmouseX always contains the horizontal position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the canvas.",
            "itemtype": "property",
            "name": "pmouseX",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 40,
            "description": "The system variable pmouseY always contains the vertical position of the\nmouse in the frame previous to the current frame, relative to (0, 0) of\nthe canvas.",
            "itemtype": "property",
            "name": "pmouseY",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 49,
            "description": "The system variable pwinMouseY always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the window.",
            "itemtype": "property",
            "name": "winMouseX",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 57,
            "description": "The system variable winMouseY always contains the current vertical\nposition of the mouse, relative to (0, 0) of the window.",
            "itemtype": "property",
            "name": "winMouseY",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 65,
            "description": "The system variable pwinMouseX always contains the horizontal position\nof the mouse in the frame previous to the current frame, relative to\n(0, 0) of the window.",
            "itemtype": "property",
            "name": "pwinMouseX",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 74,
            "description": "The system variable pwinMouseY always contains the vertical position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the window.",
            "itemtype": "property",
            "name": "pwinMouseY",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 83,
            "description": "Processing automatically tracks if the mouse button is pressed and which\nbutton is pressed. The value of the system variable mouseButton is either\nLEFT, RIGHT, or CENTER depending on which button is pressed. Browsers are\nweird, USE AT YOUR OWN RISK FOR NOW!",
            "itemtype": "property",
            "name": "mouseButton",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 93,
            "description": "The boolean system variable isMousePressed is true if the mouse is pressed\nand false if not.",
            "itemtype": "property",
            "name": "isMousePressed",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 133,
            "description": "The mouseMoved() function is called every time the mouse moves and a mouse\nbutton is not pressed.",
            "itemtype": "method",
            "name": "mouseMoved",
            "example": [
                "\n  <div>\n    <code>\n      // Move the mouse across the image\n      // to change its value\n      \n      var value = 0;\n      function draw() {\n        fill(value);\n        rect(25, 25, 50, 50);\n      }\n      function mouseMoved() {\n        value = value + 5;\n        if (value > 255) {\n          value = 0;\n        }\n      }\n    </code>\n  </div>"
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 159,
            "description": "The mouseDragged() function is called once every time the mouse moves and\na mouse button is pressed.",
            "itemtype": "method",
            "name": "mouseDragged",
            "example": [
                "\n  <div>\n    <code>\n      // Move the mouse across the image\n      // to change its value\n      \n      var value = 0;\n      function draw() {\n        fill(value);\n        rect(25, 25, 50, 50);\n      }\n      function mouseDragged() {\n        value = value + 5;\n        if (value > 255) {\n          value = 0;\n        }\n      }\n    </code>\n  </div>"
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 195,
            "description": "The mousePressed() function is called once after every time a mouse button\nis pressed. The mouseButton variable (see the related reference entry)\ncan be used to determine which button has been pressed.",
            "itemtype": "method",
            "name": "mousePressed",
            "example": [
                "\n  <div>\n    <code>\n      // Click within the image to change \n      // the value of the rectangle\n      \n      var value = 0;\n      function draw() {\n        fill(value);\n        rect(25, 25, 50, 50);\n      }\n      function mouseClicked() {\n        if (value == 0) {\n          value = 255;\n        } else {\n          value = 0;\n        }\n      }\n    </code>\n  </div>"
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 232,
            "description": "The mouseReleased() function is called every time a mouse button is\nreleased.",
            "itemtype": "method",
            "name": "mouseReleased",
            "example": [
                "\n  <div>\n    <code>\n      // Click within the image to change \n      // the value of the rectangle\n      \n      var value = 0;\n      function draw() {\n        fill(value);\n        rect(25, 25, 50, 50);\n      }\n      function mouseReleased() {\n        if (value == 0) {\n          value = 255;\n        } else {\n          value = 0;\n        }\n      }\n    </code>\n  </div>"
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 267,
            "description": "The mouseClicked() function is called once after a mouse button has been\npressed and then released.",
            "itemtype": "method",
            "name": "mouseClicked",
            "example": [
                "\n  <div>\n    <code>\n      // Click within the image to change \n      // the value of the rectangle\n      // after the mouse has been clicked\n      \n      var value = 0;\n      function draw() {\n        fill(value);\n        rect(25, 25, 50, 50);\n      }\n      function mouseClicked() {\n        if (value == 0) {\n          value = 255;\n        } else {\n          value = 0;\n        }\n      }\n    </code>\n  </div>"
            ],
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/mouse.js",
            "line": 301,
            "description": "The event.wheelDelta or event.detail property returns negative values if\nthe mouse wheel if rotated up or away from the user and positive in the\nother direction. On OS X with \"natural\" scrolling enabled, the values are\nopposite.\n\nSee <a href=\"http://www.javascriptkit.com/javatutors/onmousewheel.shtml\">\nmouse wheel event in JS</a>.",
            "itemtype": "method",
            "name": "mouseWheel",
            "class": "Mouse",
            "module": "Input"
        },
        {
            "file": "src/input/time_date.js",
            "line": 12,
            "description": "p5.js communicates with the clock on your computer. The day() function\nreturns the current day as a value from 1 - 31.",
            "itemtype": "method",
            "name": "day",
            "return": {
                "description": "the current day",
                "type": "Number"
            },
            "class": "Time & Date",
            "module": "Input"
        },
        {
            "file": "src/input/time_date.js",
            "line": 23,
            "description": "p5.js communicates with the clock on your computer. The hour() function\nreturns the current hour as a value from 0 - 23.",
            "itemtype": "method",
            "name": "hour",
            "return": {
                "description": "the current hour",
                "type": "Number"
            },
            "class": "Time & Date",
            "module": "Input"
        },
        {
            "file": "src/input/time_date.js",
            "line": 34,
            "description": "p5.js communicates with the clock on your computer. The minute() function\nreturns the current minute as a value from 0 - 59.",
            "itemtype": "method",
            "name": "minute",
            "return": {
                "description": "the current minute",
                "type": "Number"
            },
            "class": "Time & Date",
            "module": "Input"
        },
        {
            "file": "src/input/time_date.js",
            "line": 45,
            "description": "Returns the number of milliseconds (thousandths of a second) since\nstarting the program. This information is often used for timing events and\nanimation sequences.",
            "itemtype": "method",
            "name": "millis",
            "return": {
                "description": "the number of milliseconds since starting the program",
                "type": "Number"
            },
            "class": "Time & Date",
            "module": "Input"
        },
        {
            "file": "src/input/time_date.js",
            "line": 57,
            "description": "p5.js communicates with the clock on your computer. The month() function\nreturns the current month as a value from 1 - 12.",
            "itemtype": "method",
            "name": "month",
            "return": {
                "description": "the current month",
                "type": "Number"
            },
            "class": "Time & Date",
            "module": "Input"
        },
        {
            "file": "src/input/time_date.js",
            "line": 68,
            "description": "p5.js communicates with the clock on your computer. The second() function\nreturns the current second as a value from 0 - 59.",
            "itemtype": "method",
            "name": "second",
            "return": {
                "description": "the current second",
                "type": "Number"
            },
            "class": "Time & Date",
            "module": "Input"
        },
        {
            "file": "src/input/time_date.js",
            "line": 79,
            "description": "p5.js communicates with the clock on your computer. The year() function\nreturns the current year as an integer (2014, 2015, 2016, etc).",
            "itemtype": "method",
            "name": "year",
            "return": {
                "description": "the current year",
                "type": "Number"
            },
            "class": "Time & Date",
            "module": "Input"
        },
        {
            "file": "src/input/touch.js",
            "line": 12,
            "description": "The system variable touchX always contains the horizontal position of\none finger, relative to (0, 0) of the canvas. This is best used for\nsingle touch interactions. For multi-touch interactions, use the\ntouches[] array.",
            "itemtype": "property",
            "name": "touchX",
            "class": "Touch",
            "module": "Input"
        },
        {
            "file": "src/input/touch.js",
            "line": 22,
            "description": "The system variable touchY always contains the horizontal position of\none finger, relative to (0, 0) of the canvas. This is best used for\nsingle touch interactions. For multi-touch interactions, use the\ntouches[] array.",
            "itemtype": "property",
            "name": "touchY",
            "class": "Touch",
            "module": "Input"
        },
        {
            "file": "src/input/touch.js",
            "line": 38,
            "description": "The system variable touches[] contains an array of the positions of all\ncurrent touch points, relative to (0, 0) of the canvas. Each element in\nthe array is an object with x and y properties.",
            "itemtype": "property",
            "name": "touches[]",
            "class": "Touch",
            "module": "Input"
        },
        {
            "file": "src/input/touch.js",
            "line": 53,
            "description": "The touchStarted() function is called once after every time a touch is\nregistered.",
            "itemtype": "method",
            "name": "touchStarted",
            "class": "Touch",
            "module": "Input"
        },
        {
            "file": "src/input/touch.js",
            "line": 68,
            "description": "The touchMoved() function is called every time a touch move is registered.",
            "itemtype": "method",
            "name": "touchMoved",
            "class": "Touch",
            "module": "Input"
        },
        {
            "file": "src/input/touch.js",
            "line": 82,
            "description": "The touchEnded() function is called every time a touch ends.",
            "itemtype": "method",
            "name": "touchEnded",
            "class": "Touch",
            "module": "Input"
        },
        {
            "file": "src/math/calculation.js",
            "line": 12,
            "description": "Calculates the absolute value (magnitude) of a number. Maps to Math.abs().\nThe absolute value of a number is always positive.",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "n",
                    "description": "number to compute",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "absolute value of given number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 22,
            "description": "Calculates the closest int value that is greater than or equal to the\nvalue of the parameter. Maps to Math.ceil(). For example, ceil(9.03)\nreturns the value 10.",
            "itemtype": "method",
            "name": "ceil",
            "params": [
                {
                    "name": "n",
                    "description": "number to round up",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded up number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 33,
            "description": "Constrains a value to not exceed a maximum and minimum value.",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "amt",
                    "description": "number to constrain",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "minimum limit",
                    "type": "Number"
                },
                {
                    "name": "high",
                    "description": "maximum limit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "constrained number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 46,
            "description": "Calculates the distance between two points.",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "distance between the two points",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 62,
            "description": "Returns Euler's number e (2.71828...) raised to the power of the n\nparameter. Maps to Math.exp().",
            "itemtype": "method",
            "name": "exp",
            "params": [
                {
                    "name": "n",
                    "description": "exponent to raise",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "e^n",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 72,
            "description": "Calculates the closest int value that is less than or equal to the\nvalue of the parameter. Maps to Math.floor().",
            "itemtype": "method",
            "name": "floor",
            "params": [
                {
                    "name": "n",
                    "description": "number to round down",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded down number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 82,
            "description": "Calculates a number between two numbers at a specific increment. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first point, 0.1 is very near the first point, 0.5 is\nhalf-way in between, etc. The lerp function is convenient for creating\nmotion along a straight path and for drawing dotted lines.",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "start",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "second value",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "number between 0.0 and 1.0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "lerped value",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 99,
            "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This\nfunction expects the n parameter to be a value greater than 0.0. Maps to\nMath.log().",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "n",
                    "description": "number greater than 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "natural logarithm of n",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 110,
            "description": "Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no \"start\" position, the magnitude of a vector can be thought of as\nthe distance from the coordinate 0,0 to its x,y value. Therefore, mag() is\na shortcut for writing dist(0, 0, x, y).",
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "a",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "second value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "magnitude of vector from (0,0) to (a,b)",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 126,
            "description": "Re-maps a number from one range to another.\nIn the first example above, the number 25 is converted from a value in the\nrange of 0 to 100 into a value that ranges from the left edge of the\nwindow (0) to the right edge (width).",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "value",
                    "description": "the incoming value to be converted",
                    "type": "Number"
                },
                {
                    "name": "start1",
                    "description": "lower bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "stop1",
                    "description": "upper bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "start2",
                    "description": "lower bound of the value's target range",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "upper bound of the value's target range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "remapped number",
                "type": "Number"
            },
            "example": [
                "\n  <div><code>\n    createCanvas(200, 200);\n    var value = 25;\n    var m = map(value, 0, 100, 0, width);\n    ellipse(m, 200, 10, 10);\n  </code></div>\n\n  <div><code>\n    function setup() {\n      createCanvs(200, 200);\n      noStroke();\n    }\n\n    function draw() {\n      background(204);\n      var x1 = map(mouseX, 0, width, 50, 150);\n      ellipse(x1, 75, 50, 50);  \n      var x2 = map(mouseX, 0, width, 0, 200);\n      ellipse(x2, 125, 50, 50);  \n    }\n  </code></div>"
            ],
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 166,
            "description": "Determines the largest value in a sequence of numbers, and then returns\nthat value. max() accepts any number of Number parameters, or an Array\nof any length.",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "n0",
                    "description": "Numbers to compare",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "maximum Number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 183,
            "description": "Determines the smallest value in a sequence of numbers, and then returns\nthat value. min() accepts any number of Number parameters, or an Array\nof any length.",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "n0",
                    "description": "Numbers to compare",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "minimum Number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 200,
            "description": "Normalizes a number from another range into a value between 0 and 1.\nIdentical to map(value, low, high, 0, 1).\nNumbers outside of the range are not clamped to 0 and 1, because\nout-of-range values are often intentional and useful. (See the second\nexample above.)",
            "itemtype": "method",
            "name": "norm",
            "params": [
                {
                    "name": "value",
                    "description": "incoming value to be normalized",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "lower bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "upper bound of the value's current range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "normalized number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 217,
            "description": "Facilitates exponential expressions. The pow() function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities. For example, pow(3, 5) is equivalent to the expression\n3*3*3*3*3 and pow(3, -5) is equivalent to 1 / 3*3*3*3*3. Maps to\nMath.pow().",
            "itemtype": "method",
            "name": "pow",
            "params": [
                {
                    "name": "n",
                    "description": "base of the exponential expression",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "power by which to raise the base",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "n^e",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 231,
            "description": "Calculates the integer closest to the n parameter. For example,\nround(133.8) returns the value 134. Maps to Math.round().",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "n",
                    "description": "number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 241,
            "description": "Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result. For example, -1 * -1 = 1.",
            "itemtype": "method",
            "name": "sq",
            "params": [
                {
                    "name": "n",
                    "description": "number to square",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "squared number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/calculation.js",
            "line": 252,
            "description": "Calculates the square root of a number. The square root of a number is\nalways positive, even though there may be a valid negative root. The\nsquare root s of number a is such that s*s = a. It is the opposite of\nsquaring. Maps to Math.sqrt().",
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "n",
                    "description": "non-negative number to square root",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "square root of number",
                "type": "Number"
            },
            "class": "Calculation",
            "module": "Math"
        },
        {
            "file": "src/math/noise.js",
            "line": 53,
            "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more natural ordered, harmonic\nsuccession of numbers compared to the standard <b>random()</b> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures, natural motion,\nshapes, terrains etc.<br /><br /> The main difference to the\n<b>random()</b> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program).\nThe resulting value will always be between 0.0 and 1.0. p5.js can\ncompute 1D, 2D and 3D noise, depending on the number of coordinates\ngiven. The noise value can be animated by moving through the noise space\nas demonstrated in the example above. The 2nd and 3rd dimension can also\nbe interpreted as time.<br /><br />The actual noise is structured\nsimilar to an audio signal, in respect to the function's use of\nfrequencies. Similar to the concept of harmonics in physics, perlin\nnoise is computed over several octaves which are added together for the\nfinal result. <br /><br />Another way to adjust the character of the\nresulting sequence is the scale of the input coordinates. As the\nfunction works within an infinite space the value of the coordinates\ndoesn't matter as such, only the distance between successive coordinates\ndoes (eg. when using <b>noise()</b> within a loop). As a general rule\nthe smaller the difference between coordinates, the smoother the\nresulting noise sequence will be. Steps of 0.005-0.03 work best for most\napplications, but this will differ depending on use.",
            "itemtype": "method",
            "name": "noise",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate in noise space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate in noise space",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z-coordinate in noise space",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Perlin noise value (between 0 and 1) at specified\n                     coordinates",
                "type": "Number"
            },
            "class": "Noise",
            "module": "Math"
        },
        {
            "file": "src/math/noise.js",
            "line": 170,
            "description": "Adjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over\n several octaves. Lower octaves contribute more to the output signal and\n as such define the overal intensity of the noise, whereas higher octaves\n create finer grained details in the noise sequence. By default, noise is\n computed over 4 octaves with each octave contributing exactly half than\n its predecessor, starting at 50% strength for the 1st octave. This\n falloff amount can be changed by adding an additional function\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\n 75% impact (25% less) of the previous lower octave. Any value between\n 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n result in greater than 1.0 values returned by <b>noise()</b>.<br /><br\n />By changing these parameters, the signal created by the <b>noise()</b>\n function can be adapted to fit very specific needs and characteristics.",
            "itemtype": "method",
            "name": "noiseDetail",
            "params": [
                {
                    "name": "lod",
                    "description": "number of octaves to be used by the noise",
                    "type": "Number"
                },
                {
                    "name": "falloff",
                    "description": "falloff factor for each octave",
                    "type": "Number"
                }
            ],
            "class": "Noise",
            "module": "Math"
        },
        {
            "file": "src/math/noise.js",
            "line": 196,
            "description": "NOT IMPLEMENTED YET!\n Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n produces different results each time the program is run. Set the\n <b>value</b> parameter to a constant to return the same pseudo-random\n numbers each time the software is run.",
            "class": "Noise",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 14,
            "description": "Creates a new PVector (the datatype for storing vectors). This provides a\ntwo or three dimensional vector, specifically a Euclidean (also known as \ngeometric) vector. A vector is an entity that has both magnitude and \ndirection.",
            "itemtype": "method",
            "name": "createVector",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Math",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 63,
            "description": "The x component of the vector",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 69,
            "description": "The y component of the vector",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 75,
            "description": "The z component of the vector",
            "itemtype": "property",
            "name": "z",
            "type": "{Number}",
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 84,
            "description": "Sets the x, y, and z component of the vector using two or three separate\nvariables, the data from a PVector, or the values from a float array.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector or a\n                                  PVector or an Array",
                    "type": "Number|PVector|Array",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 103,
            "description": "Gets a copy of the vector, returns a PVector object.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "the copy of the PVector object",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 114,
            "description": "Adds x, y, and z components to a vector, adds one vector to another, or\nadds two independent vectors together. The version of the method that adds\ntwo vectors together is a static method and returns a PVector, the others\nhave no return value -- they act directly on the vector. See the examples\nfor more context.",
            "itemtype": "method",
            "name": "add",
            "chainable": 1,
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector to be\n                                   added or a PVector or an Array",
                    "type": "Number|PVector|Array"
                },
                {
                    "name": "y",
                    "description": "the y component of the vector to be\n                                   added",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector to be\n                                   added",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the PVector object.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 140,
            "description": "Subtracts x, y, and z components from a vector, subtracts one vector from\nanother, or subtracts two independent vectors. The version of the method\nthat substracts two vectors is a static method and returns a PVector, the\nothers have no return value -- they act directly on the vector. See the\nexamples for more context.",
            "itemtype": "method",
            "name": "sub",
            "chainable": 1,
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector or a\n                                   PVector or an Array",
                    "type": "Number|PVector|Array"
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "PVector object.",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 164,
            "description": "Multiply the vector by a scalar.",
            "itemtype": "method",
            "name": "mult",
            "chainable": 1,
            "params": [
                {
                    "name": "n",
                    "description": "the number to multiply with the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a reference to the PVector object (allow chaining)",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 179,
            "description": "Divide the vector by a scalar.",
            "itemtype": "method",
            "name": "div",
            "chainable": 1,
            "params": [
                {
                    "name": "n",
                    "description": "the number to divide the vector by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a reference to the PVector object (allow chaining)",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 194,
            "description": "Calculates the magnitude (length) of the vector and returns the result as\na float (this is simply the equation sqrt(x*x + y*y + z*z).)",
            "itemtype": "method",
            "name": "mag",
            "return": {
                "description": "magnitude of the vector",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 205,
            "description": "Calculates the squared magnitude of the vector and returns the result\nas a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.)\nFaster if the real length is not required in the\ncase of comparing vectors, etc.",
            "itemtype": "method",
            "name": "magSq",
            "return": {
                "description": "squared magnitude of the vector",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 219,
            "description": "Calculates the dot product of two vectors.",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector or a PVector",
                    "type": "Number|PVector"
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 237,
            "description": "Calculates and returns a vector composed of the cross product between\ntwo vectors.",
            "itemtype": "method",
            "name": "cross",
            "params": [
                {
                    "name": "v",
                    "description": "PVector to be crossed",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "PVector composed of cross product",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 252,
            "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "v",
                    "description": "the x, y, and z coordinates of a PVector",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 265,
            "description": "Normalize the vector to length 1 (make it a unit vector).",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "normalized PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 275,
            "description": "Limit the magnitude of this vector to the value used for the <b>max</b>\nparameter.",
            "itemtype": "method",
            "name": "limit",
            "params": [
                {
                    "name": "max",
                    "description": "the maximum magnitude for the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the modified PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 292,
            "description": "Set the magnitude of this vector to the value used for the <b>len</b>\nparameter.",
            "mtehod": "setMag",
            "params": [
                {
                    "name": "len",
                    "description": "the new length for this vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the modified PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 304,
            "description": "Calculate the angle of rotation for this vector (only 2D vectors)\nTODO: deal with AngleMode // LM gave this a shot, is it right?",
            "itemtype": "method",
            "name": "heading",
            "return": {
                "description": "the angle of rotation",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 324,
            "description": "Rotate the vector by an angle (only 2D vectors), magnitude remains the\nsame\nTODO: Change to rotate()\nTODO: Deal with angleMode",
            "itemtype": "method",
            "name": "rotate2D",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the modified PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 342,
            "description": "Linear interpolate the vector to another vector",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "x",
                    "description": "the x component or the PVector to lerp to",
                    "type": "PVector"
                },
                {
                    "name": "y",
                    "description": "y the y component",
                    "type": "PVector",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z the z component",
                    "type": "PVector",
                    "optional": true
                },
                {
                    "name": "amt",
                    "description": "the amount of interpolation; some value between 0.0\n                      (old vector) and 1.0 (new vector). 0.1 is very near\n                      the new vector. 0.5 is halfway in between.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the modified PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 364,
            "description": "Return a representation of this vector as a float array. This is only\nfor temporary use. If used in any other fashion, the contents should be\ncopied by using the <b>PVector.get()</b> method to copy into your own\narray.",
            "itemtype": "method",
            "name": "array",
            "return": {
                "description": "an Array with the 3 values",
                "type": "Array"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 381,
            "description": "Make a new 2D unit vector from an angle",
            "itemtype": "method",
            "name": "fromAngle",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "the desired angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the new PVector object",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 393,
            "description": "Make a new 2D unit vector from a random angle",
            "itemtype": "method",
            "name": "random2D",
            "static": 1,
            "return": {
                "description": "the new PVector object",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 405,
            "description": "Make a new random 3D unit vector.",
            "itemtype": "method",
            "name": "random3D",
            "static": 1,
            "return": {
                "description": "the new PVector object",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 422,
            "description": "Adds two vectors together and returns a new one.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a PVector to add",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "a PVector to add",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the resulting new PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 435,
            "description": "Subtracts one PVector from another and returns a new one.  The second\nvector (v2) is subtracted from the first (v1), resulting in v1-v2.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a PVector to subtract from",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "a PVector to subtract",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the resulting new PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 450,
            "description": "Multiplies a vector by a scalar and returns a new vector.",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "the PVector to multiply",
                    "type": "PVector"
                },
                {
                    "name": "n",
                    "description": "the scalar",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting new PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 462,
            "description": "Divides a vector by a scalar and returns a new vector.",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "the PVector to divide",
                    "type": "PVector"
                },
                {
                    "name": "n",
                    "description": "the scalar",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting new PVector",
                "type": "PVector"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 475,
            "description": "Calculates the dot product of two vectors.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first PVector",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "the second PVector",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 487,
            "description": "Calculates the cross product of two vectors.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first PVector",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "the second PVector",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the cross product",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 499,
            "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first PVector",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "the second PVector",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 512,
            "description": "Linear interpolate a vector to another vector and return the result as a\nnew vector.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a starting PVector",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "the PVector to lerp to",
                    "type": "PVector"
                },
                {
                    "name": "the",
                    "description": "amount of interpolation; some value between 0.0\n                    (old vector) and 1.0 (new vector). 0.1 is very near\n                    the new vector. 0.5 is halfway in between.",
                    "type": "Number"
                }
            ],
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/pvector.js",
            "line": 527,
            "description": "Calculates and returns the angle (in radians) between two vectors.",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the x, y, and z components of a PVector",
                    "type": "PVector"
                },
                {
                    "name": "v2",
                    "description": "the x, y, and z components of a PVector",
                    "type": "PVector"
                }
            ],
            "return": {
                "description": "the angle between\n\nTODO: Needs to account for angleMode",
                "type": "Number"
            },
            "class": "PVector",
            "module": "Math"
        },
        {
            "file": "src/math/random.js",
            "line": 23,
            "description": "Return a random number.\n\nTakes either 0, 1 or 2 arguments.\nIf no argument is given, returns a random number between 0 and 1.\nIf one argument is given, returns a random number between 0 and the number.\nIf two arguments are given, returns a random number between them,\ninclusive.",
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "min",
                    "description": "the lower bound",
                    "type": "X"
                },
                {
                    "name": "max",
                    "description": "the upper bound",
                    "type": "Y"
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "class": "Random",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 18,
            "description": "The inverse of cos(), returns the arc cosine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned in\nthe range 0 to PI (3.1415927).",
            "itemtype": "method",
            "name": "acos",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc cosine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc cosine of the given value",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 35,
            "description": "The inverse of sin(), returns the arc sine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned\nin the range -PI/2 to PI/2.",
            "itemtype": "method",
            "name": "asin",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc sine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc sine of the given value",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 52,
            "description": "The inverse of tan(), returns the arc tangent of a value. This function\nexpects the values in the range of -Infinity to Infinity (exclusive) and\nvalues are returned in the range -PI/2 to PI/2.",
            "itemtype": "method",
            "name": "atan",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc tangent is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc tangent of the given value",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 69,
            "description": "Calculates the angle (in radians) from a specified point to the coordinate\norigin as measured from the positive x-axis. Values are returned as a\nfloat in the range from PI to -PI. The atan2() function is most often used\nfor orienting geometry to the position of the cursor. Note: The\ny-coordinate of the point is the first parameter, and the x-coordinate is\nthe second parameter, due the the structure of calculating the tangent.",
            "itemtype": "method",
            "name": "atan2",
            "params": [
                {
                    "name": "y",
                    "description": "y-coordinate of the point",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc tangent of the given point",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 90,
            "description": "Calculates the cosine of an angle. This function takes into account the\ncurrent angleMode. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "cos",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the cosine of the angle",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 106,
            "description": "Calculates the sine of an angle. This function takes into account the\ncurrent angleMode. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "sin",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the sine of the angle",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 122,
            "description": "Calculates the tangent of an angle. This function takes into account\nthe current angleMode. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "tan",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent of the angle",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 138,
            "description": "Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964.",
            "itemtype": "method",
            "name": "degrees",
            "params": [
                {
                    "name": "radians",
                    "description": "the radians value to convert to degrees",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the converted angle",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 152,
            "description": "Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964.",
            "itemtype": "method",
            "name": "radians",
            "params": [
                {
                    "name": "degrees",
                    "description": "the degree value to convert to radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the converted angle",
                "type": "Number"
            },
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/math/trigonometry.js",
            "line": 166,
            "description": "Sets the current mode of p5 to given mode.",
            "itemtype": "method",
            "name": "angleMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either RADIANS or DEGREES",
                    "type": "Number/Constant"
                }
            ],
            "class": "Trigonometry",
            "module": "Math"
        },
        {
            "file": "src/output/text_area.js",
            "line": 18,
            "description": "The print() function writes to the console area of your browser, it maps\nto console.log(). This function is often helpful for looking at the data\na program is producing. This function creates a new line of text for\neach call to the function. More than one parameter can be passed into\nthe function by separating them with commas. Alternatively, individual\nelements can be separated with quotes (\"\") and joined with the addition\noperator (+).",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "contents",
                    "description": "any combination of Number, String, Object, Boolean,\n                      Array to print",
                    "type": "Any"
                }
            ],
            "class": "Text Area",
            "module": "Output"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 17,
            "description": "Draw an arc.\n\nIf a,b,c,d,start and stop are the only params provided, draws an\nopen pie.\n\nIf mode is provided draws the arc either open, chord or pie, dependent\non the variable provided.",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "width of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "height of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "angle to start the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "angle to stop the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "optional parameter to determine the way of drawing\n                        the arc",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "example": [
                "\n  <div>\n    <img src=\"http://processing.org/reference/images/arc_.png\">\n    <code>\n      arc(50, 55, 50, 50, 0, HALF_PI);\n      noFill();\n      arc(50, 55, 60, 60, HALF_PI, PI);\n      arc(50, 55, 70, 70, PI, PI+QUARTER_PI);\n      arc(50, 55, 80, 80, PI+QUARTER_PI, TWO_PI);\n    </code>\n  </div>\n\n  <div>\n    <img src=\"http://processing.org/reference/images/arc_2.png\">\n    <code>\n      arc(50, 50, 80, 80, 0, PI+QUARTER_PI, OPEN);\n    </code>\n  </div>\n\n  <div>\n    <img src=\"http://processing.org/reference/images/arc_3.png\">\n    <code>\n      arc(50, 50, 80, 80, 0, PI+QUARTER_PI, CHORD);\n    </code>\n  </div>\n\n  <div>\n    <img src=\"http://processing.org/reference/images/arc_4.png\">\n    <code>\n      arc(50, 50, 80, 80, 0, PI+QUARTER_PI, PIE);\n    </code>\n  </div>"
            ],
            "class": "2D Primitives",
            "module": "Shape"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 101,
            "description": "Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle. By default, the first two parameters set the location,\nand the third and fourth parameters set the shape's width and height. The\norigin may be changed with the ellipseMode() function.",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "width of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "height of the ellipse.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2D Primitives",
            "module": "Shape"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 162,
            "description": "Draws a line (a direct path between two points) to the screen. The version\nof line() with four parameters draws the line in 2D. To color a line, use\nthe stroke() function. A line cannot be filled, therefore the fill()\nfunction will not affect the color of a line. 2D lines are drawn with a\nwidth of one pixel by default, but this can be changed with the\nstrokeWeight() function. The version with six parameters allows the line\nto be placed anywhere within XYZ space. Drawing this shape in 3D with the\nz parameter requires the P3D parameter in combination with size() as shown\nin the above example.",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2D Primitives",
            "module": "Shape"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 192,
            "description": "Draws a point, a coordinate in space at the dimension of one pixel.\nThe first parameter is the horizontal value for the point, the second\nvalue is the vertical value for the point, and the optional third value is\nthe depth value. Drawing this shape in 3D with the z parameter requires\nthe P3D parameter in combination with size() as shown in the above\nexample.",
            "itemtype": "method",
            "name": "point",
            "params": [
                {
                    "name": "x",
                    "description": "the x-coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y-coordinate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2D Primitives",
            "module": "Shape"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 234,
            "description": "Draw a quad. A quad is a quadrilateral, a four sided polygon. It is\nsimilar to a rectangle, but the angles between its edges are not\nconstrained to ninety degrees. The first pair of parameters (x1,y1)\nsets the first vertex and the subsequent pairs should proceed\nclockwise or counter-clockwise around the defined shape.",
            "itemtype": "method",
            "name": "quad",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Type"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Type"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Type"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Type"
                },
                {
                    "name": "x3",
                    "description": "the x-coordinate of the third point",
                    "type": "Type"
                },
                {
                    "name": "y3",
                    "description": "the y-coordinate of the third point",
                    "type": "Type"
                },
                {
                    "name": "x4",
                    "description": "the x-coordinate of the fourth point",
                    "type": "Type"
                },
                {
                    "name": "y4",
                    "description": "the y-coordinate of the fourth point",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2D Primitives",
            "module": "Shape"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 265,
            "description": "Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees. By default, the first two parameters set\nthe location of the upper-left corner, the third sets the width, and the\nfourth sets the height. The way these parameters are interpreted, however,\nmay be changed with the rectMode() function.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "height of the rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2D Primitives",
            "module": "Shape"
        },
        {
            "file": "src/shape/2d_primitives.js",
            "line": 290,
            "description": "A triangle is a plane created by connecting three points. The first two\narguments specify the first point, the middle two arguments specify the\nsecond point, and the last two arguments specify the third point.",
            "itemtype": "method",
            "name": "triangle",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate of the third point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "2D Primitives",
            "module": "Shape"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 17,
            "description": "Modifies the location from which ellipses are drawn by changing the way\nin which parameters given to ellipse() are intepreted.\n\nThe default mode is ellipseMode(CENTER), which interprets the first two\nparameters of ellipse() as the shape's center point, while the third and\nfourth parameters are its width and height.\n\nellipseMode(RADIUS) also uses the first two parameters of ellipse() as\nthe shape's center point, but uses the third and fourth parameters to\nspecify half of the shapes's width and height.\n\nellipseMode(CORNER) interprets the first two parameters of ellipse() as\nthe upper-left corner of the shape, while the third and fourth parameters\nare its width and height.\n\nellipseMode(CORNERS) interprets the first two parameters of ellipse() as\nthe location of one corner of the ellipse's bounding box, and the third\nand fourth parameters as the location of the opposite corner.\n\nThe parameter must be written in ALL CAPS because Processing is a\ncase-sensitive language.",
            "itemtype": "method",
            "name": "ellipseMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CENTER, RADIUS, CORNER, or CORNERS",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Attributes",
            "module": "Shape"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 55,
            "description": "Draws all geometry with jagged (aliased) edges. Note that smooth() is\nactive by default, so it is necessary to call noSmooth() to disable\nsmoothing of geometry, images, and fonts.",
            "itemtype": "method",
            "name": "noSmooth",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Attributes",
            "module": "Shape"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 70,
            "description": "Modifies the location from which rectangles are drawn by changing the way\nin which parameters given to rect() are intepreted.\n\nThe default mode is rectMode(CORNER), which interprets the first two\nparameters of rect() as the upper-left corner of the shape, while the\nthird and fourth parameters are its width and height.\n\nrectMode(CORNERS) interprets the first two parameters of rect() as the\nlocation of one corner, and the third and fourth parameters as the\nlocation of the opposite corner.\n\nrectMode(CENTER) interprets the first two parameters of rect() as the\nshape's center point, while the third and fourth parameters are its\nwidth and height.\n\nrectMode(RADIUS) also uses the first two parameters of rect() as the\nshape's center point, but uses the third and fourth parameters to specify\nhalf of the shapes's width and height.\n\nThe parameter must be written in ALL CAPS because Processing is a\ncase-sensitive language.",
            "itemtype": "method",
            "name": "rectMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CORNER, CORNERS, CENTER, or RADIUS",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Attributes",
            "module": "Shape"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 108,
            "description": "Draws all geometry with smooth (anti-aliased) edges. smooth() will also\nimprove image quality of resized images. Note that smooth() is active by\ndefault; noSmooth() can be used to disable smoothing of geometry,\nimages, and fonts.",
            "itemtype": "method",
            "name": "smooth",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Attributes",
            "module": "Shape"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 124,
            "description": "Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded, each of which specified with the corresponding\nparameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.",
            "itemtype": "method",
            "name": "strokeCap",
            "params": [
                {
                    "name": "cap",
                    "description": "either SQUARE, PROJECT, or ROUND",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Attributes",
            "module": "Shape"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 143,
            "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled, or rounded and specified with the\ncorresponding parameters MITER, BEVEL, and ROUND. The default joint is\nMITER.",
            "itemtype": "method",
            "name": "strokeJoin",
            "params": [
                {
                    "name": "join",
                    "description": "either MITER, BEVEL, ROUND",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Attributes",
            "module": "Shape"
        },
        {
            "file": "src/shape/attributes.js",
            "line": 163,
            "description": "Sets the width of the stroke used for lines, points, and the border\naround shapes. All widths are set in units of pixels.",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "weight",
                    "description": "the weight (in pixels) of the stroke",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Attributes",
            "module": "Shape"
        },
        {
            "file": "src/shape/curves.js",
            "line": 15,
            "description": "Draws a Bezier curve on the screen. These curves are defined by a series\nof anchor and control points. The first two parameters specify the first\nanchor point and the last two parameters specify the other anchor point.\nThe middle parameters specify the control points which define the shape\nof the curve. Bezier curves were developed by French engineer Pierre\nBezier. Using the 3D version requires rendering with P3D (see the\nEnvironment reference for more information).",
            "itemtype": "method",
            "name": "bezier",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the second anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the second anchor point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Curves",
            "module": "Shape"
        },
        {
            "file": "src/shape/curves.js",
            "line": 49,
            "description": "Sets the resolution at which Beziers display.\n\nThe default value is 20.",
            "itemtype": "method",
            "name": "bezierDetail",
            "params": [
                {
                    "name": "detail",
                    "description": "resolution of the curves",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Curves",
            "module": "Shape"
        },
        {
            "file": "src/shape/curves.js",
            "line": 63,
            "description": "Calculate a point on the Bezier Curve\n\nEvaluates the Bezier at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a bezier curve at t.",
            "itemtype": "method",
            "name": "bezierPoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the value of the Bezier at point t",
                "type": "Number"
            },
            "class": "Curves",
            "module": "Shape"
        },
        {
            "file": "src/shape/curves.js",
            "line": 89,
            "description": "Calculates the tangent of a point on a Bezier curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points",
            "itemtype": "method",
            "name": "bezierTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent at point t",
                "type": "Number"
            },
            "class": "Curves",
            "module": "Shape"
        },
        {
            "file": "src/shape/curves.js",
            "line": 114,
            "description": "Draws a curved line on the screen. The first and second parameters specify\nthe beginning control point and the last two parameters specify the ending\ncontrol point. The middle parameters specify the start and stop of the\ncurve. Longer curves can be created by putting a series of curve() \nfunctions together or using curveVertex(). An additional function called\ncurveTightness() provides control for the visual quality of the curve.\nThe curve() function is an implementation of Catmull-Rom splines. Using\nthe 3D version requires rendering with P3D (see the Environment reference\nfor more information).",
            "itemtype": "method",
            "name": "curve",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the ending control point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the ending control point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Curves",
            "module": "Shape"
        },
        {
            "file": "src/shape/curves.js",
            "line": 151,
            "description": "Sets the resolution at which curves display.\n\nThe default value is 20.",
            "itemtype": "method",
            "name": "curveDetail",
            "params": [
                {
                    "name": "resolution",
                    "description": "of the curves",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Curves",
            "module": "Shape"
        },
        {
            "file": "src/shape/curves.js",
            "line": 166,
            "description": "Calculate a point on the Curve\n\nEvaluates the Bezier at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a curve at t.",
            "itemtype": "method",
            "name": "curvePoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "bezier value at point t",
                "type": "Number"
            },
            "class": "Curves",
            "module": "Shape"
        },
        {
            "file": "src/shape/curves.js",
            "line": 193,
            "description": "Calculates the tangent of a point on a curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points",
            "itemtype": "method",
            "name": "curveTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent at point t",
                "type": "Number"
            },
            "class": "Curves",
            "module": "Shape"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 19,
            "description": "Use the beginContour() and endContour() function to create negative shapes\nwithin shapes. For instance, the center of the letter 'O'. beginContour()\nbegins recording vertices for the shape and endContour() stops recording.\nThese functions can only be within a beginShape()/endShape() pair and they\nonly work with the P2D and P3D renderers.\n\nTransformations such as translate(), rotate(), and scale() do not work\nwithin a beginContour()/endContour() pair. It is also not possible to use\nother shapes, such as ellipse() or rect() within.",
            "itemtype": "method",
            "name": "beginContour",
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Vertex",
            "module": "Shape"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 40,
            "description": "Using the beginShape() and endShape() functions allow creating more\ncomplex forms. beginShape() begins recording vertices for a shape and\nendShape() stops recording. The value of the kind parameter tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon. The parameters\navailable for beginShape() are POINTS, LINES, TRIANGLES, TRIANGLE_FAN,\nTRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the beginShape()\nfunction, a series of vertex() commands must follow. To stop drawing the\nshape, call endShape(). The vertex() function with two parameters\nspecifies a position in 2D and the vertex() function with three parameters\nspecifies a position in 3D. Each shape will be outlined with the current\nstroke color and filled with the fill color.\n\nTransformations such as translate(), rotate(), and scale() do not work\nwithin beginShape(). It is also not possible to use other shapes, such as\nellipse() or rect() within beginShape().",
            "itemtype": "method",
            "name": "beginShape",
            "params": [
                {
                    "name": "kind",
                    "description": "either POINTS, LINES, TRIANGLES,\n                               TRIANGLE_FAN, TRIANGLE_STRIP, QUADS,\n                               or QUAD_STRIP",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Vertex",
            "module": "Shape"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 83,
            "description": "Specifies vertex coordinates for Bezier curves. Each call to\nbezierVertex() defines the position of two control points and\none anchor point of a Bezier curve, adding a new segment to a\nline or shape. The first time bezierVertex() is used within a\nbeginShape() call, it must be prefaced with a call to vertex()\nto set the first anchor point. This function must be used between\nbeginShape() and endShape() and only when there is no MODE\nparameter specified to beginShape().",
            "itemtype": "method",
            "name": "bezierVertex",
            "params": [
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the anchor point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Vertex",
            "module": "Shape"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 127,
            "description": "Use the beginContour() and endContour() function to create negative\nshapes within shapes. For instance, the center of the letter 'O'.\nbeginContour() begins recording vertices for the shape and endContour()\nstops recording. These functions can only be within a\nbeginShape()/endShape() pair and they only work with the P2D and P3D\nrenderers.",
            "itemtype": "method",
            "name": "endContour",
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Vertex",
            "module": "Shape"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 170,
            "description": "The endShape() function is the companion to beginShape() and may only be\ncalled after beginShape(). When endshape() is called, all of image data\ndefined since the previous call to beginShape() is written into the image\nbuffer. The constant CLOSE as the value for the MODE parameter to close\nthe shape (to connect the beginning and the end).",
            "itemtype": "method",
            "name": "endShape",
            "params": [
                {
                    "name": "mode",
                    "description": "use CLOSE to close the shape",
                    "type": "Number/Constant"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Vertex",
            "module": "Shape"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 191,
            "description": "Specifies vertex coordinates for quadratic Bezier curves. Each call to\nquadraticVertex() defines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first time quadraticVertex() is used within a beginShape() call, it\nmust be prefaced with a call to vertex() to set the first anchor point.\nThis function must be used between beginShape() and endShape() and only\nwhen there is no MODE parameter specified to beginShape().",
            "itemtype": "method",
            "name": "quadraticVertex",
            "params": [
                {
                    "name": "cx",
                    "description": "x-coordinate for the control point",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "y-coordinate for the control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the anchor point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Vertex",
            "module": "Shape"
        },
        {
            "file": "src/shape/vertex.js",
            "line": 227,
            "description": "All shapes are constructed by connecting a series of vertices. vertex()\nis used to specify the vertex coordinates for points, lines, triangles,\nquads, and polygons. It is used exclusively within the beginShape() and\nendShape() functions.",
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "Object"
            },
            "class": "Vertex",
            "module": "Shape"
        },
        {
            "file": "src/structure/structure.js",
            "line": 15,
            "description": "Stops p5.js from continuously executing the code within draw(). If loop()\nis called, the code in draw() begins to run continuously again. If using\nnoLoop() in setup(), it should be the last line inside the block.\n\nWhen noLoop() is used, it's not possible to manipulate or access the\nscreen inside event handling functions such as mousePressed() or\nkeyPressed(). Instead, use those functions to call redraw() or loop(),\nwhich will run draw(), which can update the screen properly. This means\nthat when noLoop() has been called, no drawing can happen, and functions\nlike saveFrame() or loadPixels() may not be used.\n\nNote that if the sketch is resized, redraw() will be called to update the\nsketch, even after noLoop() has been specified. Otherwise, the sketch\nwould enter an odd state until loop() was called.",
            "itemtype": "method",
            "name": "noLoop",
            "class": "Structure",
            "module": "Structure"
        },
        {
            "file": "src/structure/structure.js",
            "line": 37,
            "description": "By default, p5.js loops through draw() continuously, executing the code\nwithin it. However, the draw() loop may be stopped by calling noLoop().\nIn that case, the draw() loop can be resumed with loop().",
            "itemtype": "method",
            "name": "loop",
            "class": "Structure",
            "module": "Structure"
        },
        {
            "file": "src/structure/structure.js",
            "line": 48,
            "description": "The pushStyle() function saves the current style settings and popStyle()\nrestores the prior settings. Note that these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with pushStyle(), it builds on\nthe current style information. The pushStyle() and popStyle() functions\ncan be embedded to provide more control. (See the second example above\nfor a demonstration.)\n\nThe style information controlled by the following functions are included\nin the style: fill(), stroke(), tint(), strokeWeight(), strokeCap(),\nstrokeJoin(), imageMode(), rectMode(), ellipseMode(), shapeMode(),\ncolorMode(), textAlign(), textFont(), textMode(), textSize(),\ntextLeading(), emissive(), specular(), shininess(), ambient()",
            "itemtype": "method",
            "name": "pushStyle",
            "class": "Structure",
            "module": "Structure"
        },
        {
            "file": "src/structure/structure.js",
            "line": 87,
            "description": "The pushStyle() function saves the current style settings and popStyle()\nrestores the prior settings; these functions are always used together.\nThey allow you to change the style settings and later return to what you\nhad. When a new style is started with pushStyle(), it builds on the\ncurrent style information. The pushStyle() and popStyle() functions can\nbe embedded to provide more control (see the second example above for\na demonstration.)",
            "itemtype": "method",
            "name": "popStyle",
            "class": "Structure",
            "module": "Structure"
        },
        {
            "file": "src/structure/structure.js",
            "line": 120,
            "description": "Executes the code within draw() one time. This functions allows the\n program to update the display window only when necessary, for example\n when an event registered by mousePressed() or keyPressed() occurs. \nIn structuring a program, it only makes sense to call redraw() within\n events such as mousePressed(). This is because redraw() does not run\n draw() immediately (it only sets a flag that indicates an update is\n needed).\n \n The redraw() function does not work properly when called inside draw().\n To enable/disable animations, use loop() and noLoop().",
            "itemtype": "method",
            "name": "redraw",
            "example": [
                "\n   <div><code>\n     var x = 0;\n    function setup() {\n       createCanvas(200, 200);\n       noLoop();\n     }\n    function draw() {\n       background(204);\n       line(x, 0, x, height); \n     }\n    function mousePressed() {\n       x += 1;\n       redraw();\n     }\n   </code></div>"
            ],
            "class": "Structure",
            "module": "Structure"
        },
        {
            "file": "src/transform/transform.js",
            "line": 21,
            "description": "Multiplies the current matrix by the one specified through the parameters.\nThis is very slow because it will try to calculate the inverse of the\ntransform, so avoid it whenever possible.",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "n00",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n01",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n02",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n10",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n11",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "n12",
                    "description": "numbers which define the 3x2 matrix to be multiplied",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 43,
            "description": "Pops the current transformation matrix off the matrix stack. Understanding\npushing and popping requires understanding the concept of a matrix stack.\nThe pushMatrix() function saves the current coordinate system to the stack\nand popMatrix() restores the prior coordinate system. pushMatrix() and\npopMatrix() are used in conjuction with the other transformation functions\nand may be embedded to control the scope of the transformations.",
            "itemtype": "method",
            "name": "popMatrix",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 61,
            "description": "Prints the current matrix to the Console.",
            "itemtype": "method",
            "name": "printMatrix",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 72,
            "description": "Pushes the current transformation matrix onto the matrix stack.\nUnderstanding pushMatrix() and popMatrix() requires understanding the\nconcept of a matrix stack. The pushMatrix() function saves the current\ncoordinate system to the stack and popMatrix() restores the prior\ncoordinate system. pushMatrix() and popMatrix() are used in conjuction\nwith the other transformation functions and may be embedded to control\nthe scope of the transformations.",
            "itemtype": "method",
            "name": "pushMatrix",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 91,
            "description": "Replaces the current matrix with the identity matrix.",
            "itemtype": "method",
            "name": "resetMatrix",
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 104,
            "description": "Rotates a shape the amount specified by the angle parameter. This\nfunction accounts for angleMode, so angles can be entered in either\nRADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nrotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\nAll tranformations are reset when draw() begins again.\n\nTechnically, rotate() multiplies the current transformation matrix\nby a rotation matrix. This function can be further controlled by\nthe pushMatrix() and popMatrix().",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 155,
            "description": "Increases or decreases the size of a shape by expanding and contracting\nvertices. Objects always scale from their relative origin to the\ncoordinate system. Scale values are specified as decimal percentages.\nFor example, the function call scale(2.0) increases the dimension of a\nshape by 200%.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function multiply the effect. For example, calling scale(2.0)\nand then scale(1.5) is the same as scale(3.0). If scale() is called\nwithin draw(), the transformation is reset when the loop begins again.\n\nUsing this fuction with the z parameter requires using P3D as a\nparameter for size(), as shown in the third example above. This function\ncan be further controlled with pushMatrix() and popMatrix().",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "s",
                    "description": "percentage to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "percentage to scale the object in the y-axis",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 196,
            "description": "Shears a shape around the x-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode.\nObjects are always sheared around their relative position to the origin\nand positive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\nIf shearX() is called within the draw(), the transformation is reset when\nthe loop begins again. \n\nTechnically, shearX() multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\npushMatrix() and popMatrix() functions.",
            "itemtype": "method",
            "name": "shearX",
            "params": [
                {
                    "name": "angle",
                    "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 228,
            "description": "Shears a shape around the y-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\nshearY() is called within the draw(), the transformation is reset when\nthe loop begins again.  \n\nTechnically, shearY() multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\npushMatrix() and popMatrix() functions.",
            "itemtype": "method",
            "name": "shearY",
            "params": [
                {
                    "name": "angle",
                    "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/transform/transform.js",
            "line": 260,
            "description": "Specifies an amount to displace objects within the display window.\nThe x parameter specifies left/right translation, the y parameter\nspecifies up/down translation.\n\nTransformations are cumulative and apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For example,\ncalling translate(50, 0) and then translate(20, 0) is the same as\ntranslate(70, 0). If translate() is called within draw(), the\ntransformation is reset when the loop begins again. This function can be\nfurther controlled by using pushMatrix() and popMatrix().",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "left/right translation",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "up/down translation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the p5 object",
                "type": "P5"
            },
            "class": "Transform",
            "module": "Transform"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 18,
            "description": "Sets the current alignment for drawing text. The parameters LEFT, CENTER,\nand RIGHT set the display characteristics of the letters in relation to\nthe values for the x and y parameters of the text() function.",
            "itemtype": "method",
            "name": "textAlign",
            "params": [
                {
                    "name": "a",
                    "description": "horizontal alignment, either LEFT,\n                           CENTER, or RIGHT",
                    "type": "Number/Constant"
                }
            ],
            "class": "Attributes",
            "module": "Typography"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 35,
            "description": "Calculates and returns the height of any character or text string.",
            "itemtype": "method",
            "name": "textHeight",
            "params": [
                {
                    "name": "s",
                    "description": "the String of characters to measure",
                    "type": "String"
                }
            ],
            "class": "Attributes",
            "module": "Typography"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 45,
            "description": "Sets the spacing between lines of text in units of pixels. This\nsetting will be used in all subsequent calls to the text() function.",
            "itemtype": "method",
            "name": "textLeading",
            "params": [
                {
                    "name": "l",
                    "description": "the size in pixels for spacing between lines",
                    "type": "Number"
                }
            ],
            "class": "Attributes",
            "module": "Typography"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 56,
            "description": "Sets the current font size. This size will be used in all subsequent\ncalls to the text() function. Font size is measured in units of pixels.",
            "itemtype": "method",
            "name": "textSize",
            "params": [
                {
                    "name": "s",
                    "description": "the size of the letters in units of pixels",
                    "type": "Number"
                }
            ],
            "class": "Attributes",
            "module": "Typography"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 67,
            "description": "Sets the style of the text to NORMAL, ITALIC, or BOLD. Note this is\noverriden by CSS styling.",
            "itemtype": "method",
            "name": "textStyle",
            "params": [
                {
                    "name": "s",
                    "description": "styling for text, either NORMAL,\n                           ITALIC, or BOLD",
                    "type": "Number/Constant"
                }
            ],
            "class": "Attributes",
            "module": "Typography"
        },
        {
            "file": "src/typography/attributes.js",
            "line": 83,
            "description": "Calculates and returns the width of any character or text string.",
            "itemtype": "method",
            "name": "textWidth",
            "params": [
                {
                    "name": "s",
                    "description": "the String of characters to measure",
                    "type": "String"
                }
            ],
            "class": "Attributes",
            "module": "Typography"
        },
        {
            "file": "src/typography/loading_displaying.js",
            "line": 13,
            "description": "Draws text to the screen. Displays the information specified in the first\nparameter on the screen in the position specified by the additional\nparameters. A default font will be used unless a font is set with the\ntextFont() function and a default size will be used unless a font is set\nwith textSize(). Change the color of the text with the fill() function.\nThe text displays in relation to the textAlign() function, which gives the\noption to draw to the left, right, and center of the coordinates.\n\nThe x2 and y2 parameters define a rectangular area to display within and\nmay only be used with string data. When these parameters are specified,\nthey are interpreted based on the current rectMode() setting. Text that\ndoes not fit completely within the rectangle specified will not be drawn\nto the screen.",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "str",
                    "description": "the alphanumberic symbols to be displayed",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of text",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of text",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "by default, the width of the text box,\n                    see rectMode() for more info",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "by default, the height of the text box,\n                    see rectMode() for more info",
                    "type": "Number"
                }
            ],
            "class": "Loading & Displaying",
            "module": "Typography"
        },
        {
            "file": "src/typography/loading_displaying.js",
            "line": 104,
            "description": "Sets the current font that will be drawn with the text() function.",
            "itemtype": "method",
            "name": "textFont",
            "params": [
                {
                    "name": "str",
                    "description": "name of font",
                    "type": "String"
                }
            ],
            "class": "Loading & Displaying",
            "module": "Typography"
        },
        {
            "file": "src/var/constants.js",
            "line": 21,
            "description": "HALF_PI is a mathematical constant with the value\n1.57079632679489661923. It is half the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos().",
            "itemtype": "property",
            "name": "HALF_PI",
            "class": "Constants",
            "module": "Constants"
        },
        {
            "file": "src/var/constants.js",
            "line": 30,
            "description": "PI is a mathematical constant with the value\n3.14159265358979323846. It is the ratio of the circumference\nof a circle to its diameter. It is useful in combination with\nthe trigonometric functions sin() and cos().",
            "itemtype": "property",
            "name": "PI",
            "class": "Constants",
            "module": "Constants"
        },
        {
            "file": "src/var/constants.js",
            "line": 39,
            "description": "QUARTER_PI is a mathematical constant with the value 0.7853982.\nIt is one quarter the ratio of the circumference of a circle to\nits diameter. It is useful in combination with the trigonometric\nfunctions sin() and cos().",
            "itemtype": "property",
            "name": "QUARTER_PI",
            "class": "Constants",
            "module": "Constants"
        },
        {
            "file": "src/var/constants.js",
            "line": 48,
            "description": "TAU is an alias for TWO_PI, a mathematical constant with the\nvalue 6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos().",
            "itemtype": "property",
            "name": "TAU",
            "class": "Constants",
            "module": "Constants"
        },
        {
            "file": "src/var/constants.js",
            "line": 57,
            "description": "TWO_PI is a mathematical constant with the value\n6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos().",
            "itemtype": "property",
            "name": "TWO_PI",
            "class": "Constants",
            "module": "Constants"
        },
        {
            "file": "src/app.js",
            "line": 38,
            "description": "_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "DOM:PElement",
            "module": "Constants"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 6,
            "description": "Either returns the value of the element if no arguments\ngiven, or sets the value of the element.",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "DOM:PElement",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 26,
            "description": "Shows the current element. Essentially, setting display:block for the style.",
            "itemtype": "method",
            "name": "show",
            "class": "DOM:PElement",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 37,
            "description": "Hides the current element. Essentially, setting display:none for the style.",
            "itemtype": "method",
            "name": "hide",
            "class": "DOM:PElement",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 47,
            "description": "Sets the width and height of the element. AUTO can be used to\n only adjust one dimension.",
            "itemtype": "method",
            "name": "size",
            "params": [
                {
                    "name": "w",
                    "description": "width of the element",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the element",
                    "type": "Number"
                }
            ],
            "class": "DOM:PElement",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 87,
            "description": "Searches the page for an element with given ID and returns it as\na PElement. The DOM node itself can be accessed with .elt.\nReturns null if none found.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "id",
                    "description": "id of element to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "PElement containing node found",
                "type": "Object/PElement|Null"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 106,
            "description": "Searches the page for elements with given class and returns an\narray of PElements. The DOM nodes themselves can be accessed\nwith .elt. Returns an empty array if none found.",
            "itemtype": "method",
            "name": "getElements",
            "params": [
                {
                    "name": "class",
                    "description": "class name of elements to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array of PElement wrapped nodes found",
                "type": "Array"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 129,
            "description": "Creates a <div></div> element in the DOM with given inner HTML.",
            "itemtype": "method",
            "name": "createDiv",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 139,
            "description": "Creates a <p></p> element in the DOM with given inner HTML. Used\nfor paragraph length text.",
            "itemtype": "method",
            "name": "createP",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 150,
            "description": "Creates a <span></span> element in the DOM with given inner HTML.",
            "itemtype": "method",
            "name": "createSpan",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 160,
            "description": "Creates a <h1></h1> element in the DOM with given inner HTML.\nUsed for headings.",
            "itemtype": "method",
            "name": "createH1",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 171,
            "description": "Creates a <h2></h2> element in the DOM with given inner HTML.\nUsed for headings.",
            "itemtype": "method",
            "name": "createH2",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 182,
            "description": "Creates a <h3></h3> element in the DOM with given inner HTML.\nUsed for headings.",
            "itemtype": "method",
            "name": "createH3",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 193,
            "description": "Creates a <h4></h4> element in the DOM with given inner HTML.\nUsed for headings.",
            "itemtype": "method",
            "name": "createH4",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 204,
            "description": "Creates a <h5></h5> element in the DOM with given inner HTML.\nUsed for headings.",
            "itemtype": "method",
            "name": "createH5",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 215,
            "description": "Creates a <h6></h6> element in the DOM with given inner HTML.\nUsed for headings.",
            "itemtype": "method",
            "name": "createH6",
            "params": [
                {
                    "name": "html",
                    "description": "inner HTML for element created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 238,
            "description": "Creates an <img /> element in the DOM with given src and\nalternate text",
            "itemtype": "method",
            "name": "createImg",
            "params": [
                {
                    "name": "src",
                    "description": "src path or url for image",
                    "type": "String"
                },
                {
                    "name": "alt",
                    "description": "alternate text to be used if image does not\n                 load",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 263,
            "description": "Creates an <a></a> element in the DOM for including a hyperlink.",
            "itemtype": "method",
            "name": "createA",
            "params": [
                {
                    "name": "href",
                    "description": "url of page to link to",
                    "type": "String"
                },
                {
                    "name": "html",
                    "description": "inner html of link element to display",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "target where new link should open,\n                          could be _blank, _self, _parent, _top.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "pointer to PElement holding created\n                          node",
                "type": "Object/PElement"
            },
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 286,
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 320,
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 345,
            "class": "DOM:Manipulate",
            "module": "*"
        },
        {
            "file": "lib/addons/p5.dom.js",
            "line": 355,
            "itemtype": "method",
            "name": "createCapture",
            "params": [
                {
                    "name": "type",
                    "description": "type of capture, either VIDEO or \n                           AUDIO if none specified, default both",
                    "type": "String/Constant"
                }
            ],
            "return": {
                "description": "capture video PElement",
                "type": "Object/PElement"
            },
            "class": "p5.dom:p5.dom",
            "module": "*"
        }
    ],
    "warnings": [
        {
            "message": "param name missing: {Invert}",
            "line": " src/image/filters.js:243"
        },
        {
            "message": "unknown tag: mtehod",
            "line": " src/math/pvector.js:292"
        },
        {
            "message": "Missing item type\np5\n\nThis is the p5 instance constructor.\n\nA p5 instance holds all the properties and methods related to\na p5 sketch.  It expects an incoming sketch closure with optional\npreload(), setup() and draw() properties to attach to this p5\ninstance for running a sketch.  It can also take an optional node\nparameter for attaching the generated p5 canvas to a node.\n\nA p5 sketch can run in \"global\" or \"instance\" mode:\n\"global\"   - all properties and methods are attached to the window\n\"instance\" - all properties and methods are bound to this p5 object",
            "line": " src/core/core.js:14"
        },
        {
            "message": "Missing item type\nReturns the current framerate.",
            "line": " src/environment/environment.js:85"
        },
        {
            "message": "Missing item type\nSpecifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within setup() is\nrecommended. The default rate is 60 frames per second.\n\nCalling frameRate() with no arguments returns the current framerate.",
            "line": " src/environment/environment.js:94"
        },
        {
            "message": "Missing item type\nThis module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implmentation.",
            "line": " src/image/filters.js:5"
        },
        {
            "message": "Missing item type\nReturns the pixel buffer for a canvas",
            "line": " src/image/filters.js:31"
        },
        {
            "message": "Missing item type\nReturns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "line": " src/image/filters.js:54"
        },
        {
            "message": "Missing item type\nModifies pixels RGBA values to values contained in the data object.",
            "line": " src/image/filters.js:73"
        },
        {
            "message": "Missing item type\nReturns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "line": " src/image/filters.js:93"
        },
        {
            "message": "Missing item type\nReturns a blank ImageData object.",
            "line": " src/image/filters.js:116"
        },
        {
            "message": "Missing item type\nApplys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes\nactually visible in the canvas.\n\nThe apply method is the method that callers of this module would generally\nuse. It has been separated from the actual filters to support an advanced\nuse case of creating a filter chain that executes without actually updating\nthe canvas in between everystep.",
            "line": " src/image/filters.js:132"
        },
        {
            "message": "Missing item type\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " src/image/filters.js:171"
        },
        {
            "message": "Missing item type\nConverts any colors in the image to grayscale equivalents.\nNo parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " src/image/filters.js:206"
        },
        {
            "message": "Missing item type\nSets the alpha channel to entirely opaque. No parameter is used.",
            "line": " src/image/filters.js:228"
        },
        {
            "message": "Missing item type\nSets each pixel to its inverse value. No parameter is used.",
            "line": " src/image/filters.js:243"
        },
        {
            "message": "Missing item type\nLimits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "line": " src/image/filters.js:259"
        },
        {
            "message": "Missing item type\nreduces the bright areas in an image",
            "line": " src/image/filters.js:293"
        },
        {
            "message": "Missing item type\nincreases the bright areas in an image",
            "line": " src/image/filters.js:374"
        },
        {
            "message": "Missing item type\nThis module defines the PImage class and P5 methods for\ndrawing images to the main display canvas.",
            "line": " src/image/image.js:10"
        },
        {
            "message": "Missing item type\nApply the current tint color to the input image, return the resulting\ncanvas.",
            "line": " src/image/image.js:162"
        },
        {
            "message": "Missing item type\nHelper fxn for sharing pixel methods",
            "line": " src/image/image.js:269"
        },
        {
            "message": "Missing item type\nNOT IMPLEMENTED YET!\n Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n produces different results each time the program is run. Set the\n <b>value</b> parameter to a constant to return the same pseudo-random\n numbers each time the software is run.",
            "line": " src/math/noise.js:196"
        },
        {
            "message": "Missing item type\nSet the magnitude of this vector to the value used for the <b>len</b>\nparameter.",
            "line": " src/math/pvector.js:292"
        },
        {
            "message": "Missing item type\nAdds two vectors together and returns a new one.",
            "line": " src/math/pvector.js:422"
        },
        {
            "message": "Missing item type\nSubtracts one PVector from another and returns a new one.  The second\nvector (v2) is subtracted from the first (v1), resulting in v1-v2.",
            "line": " src/math/pvector.js:435"
        },
        {
            "message": "Missing item type\nMultiplies a vector by a scalar and returns a new vector.",
            "line": " src/math/pvector.js:450"
        },
        {
            "message": "Missing item type\nDivides a vector by a scalar and returns a new vector.",
            "line": " src/math/pvector.js:462"
        },
        {
            "message": "Missing item type\nCalculates the dot product of two vectors.",
            "line": " src/math/pvector.js:475"
        },
        {
            "message": "Missing item type\nCalculates the cross product of two vectors.",
            "line": " src/math/pvector.js:487"
        },
        {
            "message": "Missing item type\nCalculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "line": " src/math/pvector.js:499"
        },
        {
            "message": "Missing item type\nLinear interpolate a vector to another vector and return the result as a\nnew vector.",
            "line": " src/math/pvector.js:512"
        },
        {
            "message": "Missing item type\nCalculates and returns the angle (in radians) between two vectors.",
            "line": " src/math/pvector.js:527"
        },
        {
            "message": "Missing item type\n_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing",
            "line": " src/app.js:38"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.dom.js:286"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.dom.js:320"
        },
        {
            "message": "Missing item type",
            "line": " lib/addons/p5.dom.js:345"
        }
    ]
}